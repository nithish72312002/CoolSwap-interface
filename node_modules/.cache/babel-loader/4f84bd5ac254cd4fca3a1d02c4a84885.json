{"ast":null,"code":"/**\r\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\r\n * @param uri to convert to fetch-able http url\r\n */\nexport default function uriToHttp(uri) {\n  var _uri$match, _uri$match2;\n  var protocol = uri.split(':')[0].toLowerCase();\n  switch (protocol) {\n    case 'https':\n      return [uri];\n    case 'http':\n      return ['https' + uri.substr(4), uri];\n    case 'ipfs':\n      var hash = (_uri$match = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)) === null || _uri$match === void 0 ? void 0 : _uri$match[2];\n      return [\"https://cloudflare-ipfs.com/ipfs/\".concat(hash, \"/\"), \"https://ipfs.io/ipfs/\".concat(hash, \"/\")];\n    case 'ipns':\n      var name = (_uri$match2 = uri.match(/^ipns:(\\/\\/)?(.*)$/i)) === null || _uri$match2 === void 0 ? void 0 : _uri$match2[2];\n      return [\"https://cloudflare-ipfs.com/ipns/\".concat(name, \"/\"), \"https://ipfs.io/ipns/\".concat(name, \"/\")];\n    default:\n      return [];\n  }\n}","map":{"version":3,"names":["uriToHttp","uri","_uri$match","_uri$match2","protocol","split","toLowerCase","substr","hash","match","concat","name"],"sources":["E:/testprojects/CoolSwap-interface/src/utils/uriToHttp.ts"],"sourcesContent":["/**\r\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\r\n * @param uri to convert to fetch-able http url\r\n */\r\nexport default function uriToHttp(uri: string): string[] {\r\n  const protocol = uri.split(':')[0].toLowerCase();\r\n  switch (protocol) {\r\n    case 'https':\r\n      return [uri];\r\n    case 'http':\r\n      return ['https' + uri.substr(4), uri];\r\n    case 'ipfs':\r\n      const hash = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)?.[2];\r\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`];\r\n    case 'ipns':\r\n      const name = uri.match(/^ipns:(\\/\\/)?(.*)$/i)?.[2];\r\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`];\r\n    default:\r\n      return [];\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,SAASA,SAASA,CAACC,GAAW,EAAY;EAAA,IAAAC,UAAA,EAAAC,WAAA;EACvD,IAAMC,QAAQ,GAAGH,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAChD,QAAQF,QAAQ;IACd,KAAK,OAAO;MACV,OAAO,CAACH,GAAG,CAAC;IACd,KAAK,MAAM;MACT,OAAO,CAAC,OAAO,GAAGA,GAAG,CAACM,MAAM,CAAC,CAAC,CAAC,EAAEN,GAAG,CAAC;IACvC,KAAK,MAAM;MACT,IAAMO,IAAI,IAAAN,UAAA,GAAGD,GAAG,CAACQ,KAAK,CAAC,qBAAqB,CAAC,cAAAP,UAAA,uBAAhCA,UAAA,CAAmC,CAAC,CAAC;MAClD,OAAO,qCAAAQ,MAAA,CAAqCF,IAAI,gCAAAE,MAAA,CAA6BF,IAAI,OAAI;IACvF,KAAK,MAAM;MACT,IAAMG,IAAI,IAAAR,WAAA,GAAGF,GAAG,CAACQ,KAAK,CAAC,qBAAqB,CAAC,cAAAN,WAAA,uBAAhCA,WAAA,CAAmC,CAAC,CAAC;MAClD,OAAO,qCAAAO,MAAA,CAAqCC,IAAI,gCAAAD,MAAA,CAA6BC,IAAI,OAAI;IACvF;MACE,OAAO,EAAE;EACb;AACF"},"metadata":{},"sourceType":"module"}