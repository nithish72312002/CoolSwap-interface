{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nvar U32_MASK64 = BigInt(Math.pow(2, 32) - 1);\nvar _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n) {\n  var le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\nexports.fromBig = fromBig;\nfunction split(lst) {\n  var le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var Ah = new Uint32Array(lst.length);\n  var Al = new Uint32Array(lst.length);\n  for (var i = 0; i < lst.length; i++) {\n    var _fromBig = fromBig(lst[i], le),\n      h = _fromBig.h,\n      l = _fromBig.l;\n    var _ref = [h, l];\n    Ah[i] = _ref[0];\n    Al[i] = _ref[1];\n  }\n  return [Ah, Al];\n}\nexports.split = split;\nvar toBig = function toBig(h, l) {\n  return BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n};\nexports.toBig = toBig;\n// for Shift in [0, 32)\nvar shrSH = function shrSH(h, l, s) {\n  return h >>> s;\n};\nvar shrSL = function shrSL(h, l, s) {\n  return h << 32 - s | l >>> s;\n};\n// Right rotate for Shift in [1, 32)\nvar rotrSH = function rotrSH(h, l, s) {\n  return h >>> s | l << 32 - s;\n};\nvar rotrSL = function rotrSL(h, l, s) {\n  return h << 32 - s | l >>> s;\n};\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nvar rotrBH = function rotrBH(h, l, s) {\n  return h << 64 - s | l >>> s - 32;\n};\nvar rotrBL = function rotrBL(h, l, s) {\n  return h >>> s - 32 | l << 64 - s;\n};\n// Right rotate for shift===32 (just swaps l&h)\nvar rotr32H = function rotr32H(h, l) {\n  return l;\n};\nvar rotr32L = function rotr32L(h, l) {\n  return h;\n};\n// Left rotate for Shift in [1, 32)\nvar rotlSH = function rotlSH(h, l, s) {\n  return h << s | l >>> 32 - s;\n};\nvar rotlSL = function rotlSL(h, l, s) {\n  return l << s | h >>> 32 - s;\n};\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nvar rotlBH = function rotlBH(h, l, s) {\n  return l << s - 32 | h >>> 64 - s;\n};\nvar rotlBL = function rotlBL(h, l, s) {\n  return h << s - 32 | l >>> 64 - s;\n};\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n  var l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / Math.pow(2, 32) | 0) | 0,\n    l: l | 0\n  };\n}\nexports.add = add;\n// Addition with more than 2 elements\nvar add3L = function add3L(Al, Bl, Cl) {\n  return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\n};\nvar add3H = function add3H(low, Ah, Bh, Ch) {\n  return Ah + Bh + Ch + (low / Math.pow(2, 32) | 0) | 0;\n};\nvar add4L = function add4L(Al, Bl, Cl, Dl) {\n  return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\n};\nvar add4H = function add4H(low, Ah, Bh, Ch, Dh) {\n  return Ah + Bh + Ch + Dh + (low / Math.pow(2, 32) | 0) | 0;\n};\nvar add5L = function add5L(Al, Bl, Cl, Dl, El) {\n  return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\n};\nvar add5H = function add5H(low, Ah, Bh, Ch, Dh, Eh) {\n  return Ah + Bh + Ch + Dh + Eh + (low / Math.pow(2, 32) | 0) | 0;\n};\n// prettier-ignore\nvar u64 = {\n  fromBig: fromBig,\n  split: split,\n  toBig: exports.toBig,\n  shrSH: shrSH,\n  shrSL: shrSL,\n  rotrSH: rotrSH,\n  rotrSL: rotrSL,\n  rotrBH: rotrBH,\n  rotrBL: rotrBL,\n  rotr32H: rotr32H,\n  rotr32L: rotr32L,\n  rotlSH: rotlSH,\n  rotlSL: rotlSL,\n  rotlBH: rotlBH,\n  rotlBL: rotlBL,\n  add: add,\n  add3L: add3L,\n  add3H: add3H,\n  add4L: add4L,\n  add4H: add4H,\n  add5H: add5H,\n  add5L: add5L\n};\nexports.default = u64;","map":{"version":3,"names":["U32_MASK64","BigInt","Math","pow","_32n","fromBig","n","le","arguments","length","undefined","h","Number","l","exports","split","lst","Ah","Uint32Array","Al","i","_fromBig","_ref","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","default"],"sources":["src/_u64.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,IAAMA,UAAU,GAAGC,MAAM,CAACC,IAAA,CAAAC,GAAA,EAAC,EAAI,EAAE,IAAG,CAAC,CAAC;AACtC,IAAMC,IAAI,GAAGH,MAAM,CAAC,EAAE,CAAC;AAEvB;AACA,SAAgBI,OAAOA,CAACC,CAAS,EAAY;EAAA,IAAVC,EAAE,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC3C,IAAID,EAAE,EAAE,OAAO;IAAEI,CAAC,EAAEC,MAAM,CAACN,CAAC,GAAGN,UAAU,CAAC;IAAEa,CAAC,EAAED,MAAM,CAAEN,CAAC,IAAIF,IAAI,GAAIJ,UAAU;EAAC,CAAE;EACjF,OAAO;IAAEW,CAAC,EAAEC,MAAM,CAAEN,CAAC,IAAIF,IAAI,GAAIJ,UAAU,CAAC,GAAG,CAAC;IAAEa,CAAC,EAAED,MAAM,CAACN,CAAC,GAAGN,UAAU,CAAC,GAAG;EAAC,CAAE;AACnF;AAHAc,OAAA,CAAAT,OAAA,GAAAA,OAAA;AAKA,SAAgBU,KAAKA,CAACC,GAAa,EAAY;EAAA,IAAVT,EAAE,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC7C,IAAIS,EAAE,GAAG,IAAIC,WAAW,CAACF,GAAG,CAACP,MAAM,CAAC;EACpC,IAAIU,EAAE,GAAG,IAAID,WAAW,CAACF,GAAG,CAACP,MAAM,CAAC;EACpC,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,CAACP,MAAM,EAAEW,CAAC,EAAE,EAAE;IACnC,IAAAC,QAAA,GAAiBhB,OAAO,CAACW,GAAG,CAACI,CAAC,CAAC,EAAEb,EAAE,CAAC;MAA5BI,CAAC,GAAAU,QAAA,CAADV,CAAC;MAAEE,CAAC,GAAAQ,QAAA,CAADR,CAAC;IAAyB,IAAAS,IAAA,GACpB,CAACX,CAAC,EAAEE,CAAC,CAAC;IAAtBI,EAAE,CAACG,CAAC,CAAC,GAAAE,IAAA;IAAEH,EAAE,CAACC,CAAC,CAAC,GAAAE,IAAA;;EAEf,OAAO,CAACL,EAAE,EAAEE,EAAE,CAAC;AACjB;AARAL,OAAA,CAAAC,KAAA,GAAAA,KAAA;AAUO,IAAMQ,KAAK,GAAG,SAARA,KAAKA,CAAIZ,CAAS,EAAEE,CAAS;EAAA,OAAMZ,MAAM,CAACU,CAAC,KAAK,CAAC,CAAC,IAAIP,IAAI,GAAIH,MAAM,CAACY,CAAC,KAAK,CAAC,CAAC;AAAA;AAA7EC,OAAA,CAAAS,KAAK,GAAAA,KAAA;AAClB;AACA,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAIb,CAAS,EAAEE,CAAS,EAAEY,CAAS;EAAA,OAAKd,CAAC,KAAKc,CAAC;AAAA;AAC1D,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAIf,CAAS,EAAEE,CAAS,EAAEY,CAAS;EAAA,OAAMd,CAAC,IAAK,EAAE,GAAGc,CAAE,GAAKZ,CAAC,KAAKY,CAAE;AAAA;AAC9E;AACA,IAAME,MAAM,GAAG,SAATA,MAAMA,CAAIhB,CAAS,EAAEE,CAAS,EAAEY,CAAS;EAAA,OAAMd,CAAC,KAAKc,CAAC,GAAKZ,CAAC,IAAK,EAAE,GAAGY,CAAG;AAAA;AAC/E,IAAMG,MAAM,GAAG,SAATA,MAAMA,CAAIjB,CAAS,EAAEE,CAAS,EAAEY,CAAS;EAAA,OAAMd,CAAC,IAAK,EAAE,GAAGc,CAAE,GAAKZ,CAAC,KAAKY,CAAE;AAAA;AAC/E;AACA,IAAMI,MAAM,GAAG,SAATA,MAAMA,CAAIlB,CAAS,EAAEE,CAAS,EAAEY,CAAS;EAAA,OAAMd,CAAC,IAAK,EAAE,GAAGc,CAAE,GAAKZ,CAAC,KAAMY,CAAC,GAAG,EAAI;AAAA;AACtF,IAAMK,MAAM,GAAG,SAATA,MAAMA,CAAInB,CAAS,EAAEE,CAAS,EAAEY,CAAS;EAAA,OAAMd,CAAC,KAAMc,CAAC,GAAG,EAAG,GAAKZ,CAAC,IAAK,EAAE,GAAGY,CAAG;AAAA;AACtF;AACA,IAAMM,OAAO,GAAG,SAAVA,OAAOA,CAAIpB,CAAS,EAAEE,CAAS;EAAA,OAAKA,CAAC;AAAA;AAC3C,IAAMmB,OAAO,GAAG,SAAVA,OAAOA,CAAIrB,CAAS,EAAEE,CAAS;EAAA,OAAKF,CAAC;AAAA;AAC3C;AACA,IAAMsB,MAAM,GAAG,SAATA,MAAMA,CAAItB,CAAS,EAAEE,CAAS,EAAEY,CAAS;EAAA,OAAMd,CAAC,IAAIc,CAAC,GAAKZ,CAAC,KAAM,EAAE,GAAGY,CAAG;AAAA;AAC/E,IAAMS,MAAM,GAAG,SAATA,MAAMA,CAAIvB,CAAS,EAAEE,CAAS,EAAEY,CAAS;EAAA,OAAMZ,CAAC,IAAIY,CAAC,GAAKd,CAAC,KAAM,EAAE,GAAGc,CAAG;AAAA;AAC/E;AACA,IAAMU,MAAM,GAAG,SAATA,MAAMA,CAAIxB,CAAS,EAAEE,CAAS,EAAEY,CAAS;EAAA,OAAMZ,CAAC,IAAKY,CAAC,GAAG,EAAG,GAAKd,CAAC,KAAM,EAAE,GAAGc,CAAG;AAAA;AACtF,IAAMW,MAAM,GAAG,SAATA,MAAMA,CAAIzB,CAAS,EAAEE,CAAS,EAAEY,CAAS;EAAA,OAAMd,CAAC,IAAKc,CAAC,GAAG,EAAG,GAAKZ,CAAC,KAAM,EAAE,GAAGY,CAAG;AAAA;AAEtF;AACA;AACA;AACA,SAAgBY,GAAGA,CAACpB,EAAU,EAAEE,EAAU,EAAEmB,EAAU,EAAEC,EAAU;EAChE,IAAM1B,CAAC,GAAG,CAACM,EAAE,KAAK,CAAC,KAAKoB,EAAE,KAAK,CAAC,CAAC;EACjC,OAAO;IAAE5B,CAAC,EAAGM,EAAE,GAAGqB,EAAE,IAAKzB,CAAC,GAAAX,IAAA,CAAAC,GAAA,CAAG,CAAC,EAAI,EAAE,IAAI,CAAC,CAAC,GAAI,CAAC;IAAEU,CAAC,EAAEA,CAAC,GAAG;EAAC,CAAE;AAC7D;AAHAC,OAAA,CAAAuB,GAAA,GAAAA,GAAA;AAIA;AACA,IAAMG,KAAK,GAAG,SAARA,KAAKA,CAAIrB,EAAU,EAAEoB,EAAU,EAAEE,EAAU;EAAA,OAAK,CAACtB,EAAE,KAAK,CAAC,KAAKoB,EAAE,KAAK,CAAC,CAAC,IAAIE,EAAE,KAAK,CAAC,CAAC;AAAA;AAC1F,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAIC,GAAW,EAAE1B,EAAU,EAAEqB,EAAU,EAAEM,EAAU;EAAA,OAC3D3B,EAAE,GAAGqB,EAAE,GAAGM,EAAE,IAAKD,GAAG,GAAAzC,IAAA,CAAAC,GAAA,CAAG,CAAC,EAAI,EAAE,IAAI,CAAC,CAAC,GAAI,CAAC;AAAA;AAC5C,IAAM0C,KAAK,GAAG,SAARA,KAAKA,CAAI1B,EAAU,EAAEoB,EAAU,EAAEE,EAAU,EAAEK,EAAU;EAAA,OAC3D,CAAC3B,EAAE,KAAK,CAAC,KAAKoB,EAAE,KAAK,CAAC,CAAC,IAAIE,EAAE,KAAK,CAAC,CAAC,IAAIK,EAAE,KAAK,CAAC,CAAC;AAAA;AACnD,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAIJ,GAAW,EAAE1B,EAAU,EAAEqB,EAAU,EAAEM,EAAU,EAAEI,EAAU;EAAA,OACvE/B,EAAE,GAAGqB,EAAE,GAAGM,EAAE,GAAGI,EAAE,IAAKL,GAAG,GAAAzC,IAAA,CAAAC,GAAA,CAAG,CAAC,EAAI,EAAE,IAAI,CAAC,CAAC,GAAI,CAAC;AAAA;AACjD,IAAM8C,KAAK,GAAG,SAARA,KAAKA,CAAI9B,EAAU,EAAEoB,EAAU,EAAEE,EAAU,EAAEK,EAAU,EAAEI,EAAU;EAAA,OACvE,CAAC/B,EAAE,KAAK,CAAC,KAAKoB,EAAE,KAAK,CAAC,CAAC,IAAIE,EAAE,KAAK,CAAC,CAAC,IAAIK,EAAE,KAAK,CAAC,CAAC,IAAII,EAAE,KAAK,CAAC,CAAC;AAAA;AAChE,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAIR,GAAW,EAAE1B,EAAU,EAAEqB,EAAU,EAAEM,EAAU,EAAEI,EAAU,EAAEI,EAAU;EAAA,OACnFnC,EAAE,GAAGqB,EAAE,GAAGM,EAAE,GAAGI,EAAE,GAAGI,EAAE,IAAKT,GAAG,GAAAzC,IAAA,CAAAC,GAAA,CAAG,CAAC,EAAI,EAAE,IAAI,CAAC,CAAC,GAAI,CAAC;AAAA;AAEtD;AACA,IAAMkD,GAAG,GAAG;EACVhD,OAAO,EAAPA,OAAO;EAAEU,KAAK,EAALA,KAAK;EAAEQ,KAAK,EAALT,OAAA,CAAAS,KAAK;EACrBC,KAAK,EAALA,KAAK;EAAEE,KAAK,EAALA,KAAK;EACZC,MAAM,EAANA,MAAM;EAAEC,MAAM,EAANA,MAAM;EAAEC,MAAM,EAANA,MAAM;EAAEC,MAAM,EAANA,MAAM;EAC9BC,OAAO,EAAPA,OAAO;EAAEC,OAAO,EAAPA,OAAO;EAChBC,MAAM,EAANA,MAAM;EAAEC,MAAM,EAANA,MAAM;EAAEC,MAAM,EAANA,MAAM;EAAEC,MAAM,EAANA,MAAM;EAC9BC,GAAG,EAAHA,GAAG;EAAEG,KAAK,EAALA,KAAK;EAAEE,KAAK,EAALA,KAAK;EAAEG,KAAK,EAALA,KAAK;EAAEE,KAAK,EAALA,KAAK;EAAEI,KAAK,EAALA,KAAK;EAAEF,KAAK,EAALA;CACzC;AACDnC,OAAA,CAAAwC,OAAA,GAAeD,GAAG"},"metadata":{},"sourceType":"script"}