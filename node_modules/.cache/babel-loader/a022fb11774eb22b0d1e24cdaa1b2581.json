{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address = void 0;\nvar account_1 = require(\"./account\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Handling and generating Ethereum addresses\n */\nvar Address = /*#__PURE__*/function () {\n  function Address(buf) {\n    _classCallCheck(this, Address);\n    if (buf.length !== 20) {\n      throw new Error('Invalid address length');\n    }\n    this.buf = buf;\n  }\n  /**\n   * Returns the zero address.\n   */\n  _createClass(Address, [{\n    key: \"equals\",\n    value:\n    /**\n     * Is address equal to another.\n     */\n    function equals(address) {\n      return this.buf.equals(address.buf);\n    }\n    /**\n     * Is address zero.\n     */\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */\n  }, {\n    key: \"isPrecompileOrSystemAddress\",\n    value: function isPrecompileOrSystemAddress() {\n      var address = (0, bytes_1.bufferToBigInt)(this.buf);\n      var rangeMin = BigInt(0);\n      var rangeMax = BigInt('0xffff');\n      return address >= rangeMin && address <= rangeMax;\n    }\n    /**\n     * Returns hex encoding of address.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '0x' + this.buf.toString('hex');\n    }\n    /**\n     * Returns Buffer representation of address.\n     */\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      return Buffer.from(this.buf);\n    }\n  }], [{\n    key: \"zero\",\n    value: function zero() {\n      return new Address((0, bytes_1.zeros)(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */\n  }, {\n    key: \"fromString\",\n    value: function fromString(str) {\n      if (!(0, account_1.isValidAddress)(str)) {\n        throw new Error('Invalid address');\n      }\n      return new Address((0, bytes_1.toBuffer)(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */\n  }, {\n    key: \"fromPublicKey\",\n    value: function fromPublicKey(pubKey) {\n      if (!Buffer.isBuffer(pubKey)) {\n        throw new Error('Public key should be Buffer');\n      }\n      var buf = (0, account_1.pubToAddress)(pubKey);\n      return new Address(buf);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */\n  }, {\n    key: \"fromPrivateKey\",\n    value: function fromPrivateKey(privateKey) {\n      if (!Buffer.isBuffer(privateKey)) {\n        throw new Error('Private key should be Buffer');\n      }\n      var buf = (0, account_1.privateToAddress)(privateKey);\n      return new Address(buf);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */\n  }, {\n    key: \"generate\",\n    value: function generate(from, nonce) {\n      if (typeof nonce !== 'bigint') {\n        throw new Error('Expected nonce to be a bigint');\n      }\n      return new Address((0, account_1.generateAddress)(from.buf, (0, bytes_1.bigIntToBuffer)(nonce)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */\n  }, {\n    key: \"generate2\",\n    value: function generate2(from, salt, initCode) {\n      if (!Buffer.isBuffer(salt)) {\n        throw new Error('Expected salt to be a Buffer');\n      }\n      if (!Buffer.isBuffer(initCode)) {\n        throw new Error('Expected initCode to be a Buffer');\n      }\n      return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));\n    }\n  }]);\n  return Address;\n}();\nexports.Address = Address;","map":{"version":3,"names":["account_1","require","bytes_1","Address","buf","_classCallCheck","length","Error","_createClass","key","value","equals","address","isZero","zero","isPrecompileOrSystemAddress","bufferToBigInt","rangeMin","BigInt","rangeMax","toString","toBuffer","Buffer","from","zeros","fromString","str","isValidAddress","fromPublicKey","pubKey","isBuffer","pubToAddress","fromPrivateKey","privateKey","privateToAddress","generate","nonce","generateAddress","bigIntToBuffer","generate2","salt","initCode","generateAddress2","exports"],"sources":["../src/address.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}