{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.intToUnpaddedBuffer = exports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\nvar helpers_1 = require(\"./helpers\");\nvar internal_1 = require(\"./internal\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nvar intToHex = function intToHex(i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(\"Received an invalid integer type: \".concat(i));\n  }\n  return \"0x\".concat(i.toString(16));\n};\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nvar intToBuffer = function intToBuffer(i) {\n  var hex = (0, exports.intToHex)(i);\n  return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nvar zeros = function zeros(bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nvar setLength = function setLength(msg, length, right) {\n  var buf = (0, exports.zeros)(length);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nvar setLengthLeft = function setLengthLeft(msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nvar setLengthRight = function setLengthRight(msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nvar stripZeros = function stripZeros(a) {\n  var first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nvar unpadBuffer = function unpadBuffer(a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nvar unpadArray = function unpadArray(a) {\n  (0, helpers_1.assertIsArray)(a);\n  return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nvar unpadHexString = function unpadHexString(a) {\n  (0, helpers_1.assertIsHexString)(a);\n  a = (0, internal_1.stripHexPrefix)(a);\n  return '0x' + stripZeros(a);\n};\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nvar toBuffer = function toBuffer(v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \".concat(v));\n    }\n    return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n  }\n  if (typeof v === 'number') {\n    return (0, exports.intToBuffer)(v);\n  }\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(\"Cannot convert negative bigint to buffer. Given: \".concat(v));\n    }\n    var n = v.toString(16);\n    if (n.length % 2) n = '0' + n;\n    return Buffer.from(n, 'hex');\n  }\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n  throw new Error('invalid type');\n};\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nvar bufferToHex = function bufferToHex(buf) {\n  buf = (0, exports.toBuffer)(buf);\n  return '0x' + buf.toString('hex');\n};\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\nfunction bufferToBigInt(buf) {\n  var hex = (0, exports.bufferToHex)(buf);\n  if (hex === '0x') {\n    return BigInt(0);\n  }\n  return BigInt(hex);\n}\nexports.bufferToBigInt = bufferToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\nfunction bigIntToBuffer(num) {\n  return (0, exports.toBuffer)('0x' + num.toString(16));\n}\nexports.bigIntToBuffer = bigIntToBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nvar bufferToInt = function bufferToInt(buf) {\n  var res = Number(bufferToBigInt(buf));\n  if (!Number.isSafeInteger(res)) throw new Error('Number exceeds 53 bits');\n  return res;\n};\nexports.bufferToInt = bufferToInt;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nvar fromSigned = function fromSigned(num) {\n  return BigInt.asIntN(256, bufferToBigInt(num));\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nvar toUnsigned = function toUnsigned(num) {\n  return bigIntToBuffer(BigInt.asUintN(256, num));\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nvar addHexPrefix = function addHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\nfunction short(buffer) {\n  var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  var bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer;\n  if (bufferStr.length <= maxLength) {\n    return bufferStr;\n  }\n  return bufferStr.slice(0, maxLength) + '…';\n}\nexports.short = short;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nvar toUtf8 = function toUtf8(hex) {\n  var zerosRegexp = /^(00)+|(00)+$/g;\n  hex = (0, internal_1.stripHexPrefix)(hex);\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided');\n  }\n  var bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n  return bufferVal.toString('utf8');\n};\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nvar baToJSON = function baToJSON(ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\".concat(ba.toString('hex'));\n  } else if (ba instanceof Array) {\n    var array = [];\n    for (var i = 0; i < ba.length; i++) {\n      array.push((0, exports.baToJSON)(ba[i]));\n    }\n    return array;\n  }\n};\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nvar validateNoLeadingZeroes = function validateNoLeadingZeroes(values) {\n  for (var _i = 0, _Object$entries = Object.entries(values); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      k = _Object$entries$_i[0],\n      v = _Object$entries$_i[1];\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(\"\".concat(k, \" cannot have leading zeroes, received: \").concat(v.toString('hex')));\n    }\n  }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr);\n  }\n  return arr.map(function (a) {\n    return arrToBufArr(a);\n  });\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);\n  }\n  return arr.map(function (a) {\n    return bufArrToArr(a);\n  });\n}\nexports.bufArrToArr = bufArrToArr;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nvar bigIntToHex = function bigIntToHex(num) {\n  return '0x' + num.toString(16);\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bigIntToUnpaddedBuffer(value) {\n  return (0, exports.unpadBuffer)(bigIntToBuffer(value));\n}\nexports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;\nfunction intToUnpaddedBuffer(value) {\n  return (0, exports.unpadBuffer)((0, exports.intToBuffer)(value));\n}\nexports.intToUnpaddedBuffer = intToUnpaddedBuffer;","map":{"version":3,"names":["helpers_1","require","internal_1","intToHex","i","Number","isSafeInteger","Error","concat","toString","exports","intToBuffer","hex","Buffer","from","padToEven","slice","zeros","bytes","allocUnsafe","fill","setLength","msg","length","right","buf","copy","setLengthLeft","assertIsBuffer","setLengthRight","stripZeros","a","first","unpadBuffer","unpadArray","assertIsArray","unpadHexString","assertIsHexString","stripHexPrefix","toBuffer","v","undefined","isBuffer","Array","isArray","Uint8Array","isHexString","BigInt","n","toArray","bufferToHex","bufferToBigInt","bigIntToBuffer","num","bufferToInt","res","fromSigned","asIntN","toUnsigned","asUintN","addHexPrefix","str","isHexPrefixed","short","buffer","maxLength","arguments","bufferStr","toUtf8","zerosRegexp","bufferVal","replace","baToJSON","ba","array","push","validateNoLeadingZeroes","values","_i","_Object$entries","Object","entries","_Object$entries$_i","_slicedToArray","k","arrToBufArr","arr","map","bufArrToArr","bigIntToHex","bigIntToUnpaddedBuffer","value","intToUnpaddedBuffer"],"sources":["../src/bytes.ts"],"sourcesContent":[null],"mappings":";;;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AAUA;;;;;AAKO,IAAME,QAAQ,GAAG,SAAXA,QAAQA,CAAaC,CAAS;EACzC,IAAI,CAACC,MAAM,CAACC,aAAa,CAACF,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;IACrC,MAAM,IAAIG,KAAK,sCAAAC,MAAA,CAAsCJ,CAAC,CAAE,CAAC;;EAE3D,YAAAI,MAAA,CAAYJ,CAAC,CAACK,QAAQ,CAAC,EAAE,CAAC;AAC5B,CAAC;AALYC,OAAA,CAAAP,QAAQ,GAAAA,QAAA;AAOrB;;;;;AAKO,IAAMQ,WAAW,GAAG,SAAdA,WAAWA,CAAaP,CAAS;EAC5C,IAAMQ,GAAG,GAAG,IAAAF,OAAA,CAAAP,QAAQ,EAACC,CAAC,CAAC;EACvB,OAAOS,MAAM,CAACC,IAAI,CAAC,IAAAZ,UAAA,CAAAa,SAAS,EAACH,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;AACpD,CAAC;AAHYN,OAAA,CAAAC,WAAW,GAAAA,WAAA;AAKxB;;;;AAIO,IAAMM,KAAK,GAAG,SAARA,KAAKA,CAAaC,KAAa;EAC1C,OAAOL,MAAM,CAACM,WAAW,CAACD,KAAK,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC;AAC1C,CAAC;AAFYV,OAAA,CAAAO,KAAK,GAAAA,KAAA;AAIlB;;;;;;;;AAQA,IAAMI,SAAS,GAAG,SAAZA,SAASA,CAAaC,GAAW,EAAEC,MAAc,EAAEC,KAAc;EACrE,IAAMC,GAAG,GAAG,IAAAf,OAAA,CAAAO,KAAK,EAACM,MAAM,CAAC;EACzB,IAAIC,KAAK,EAAE;IACT,IAAIF,GAAG,CAACC,MAAM,GAAGA,MAAM,EAAE;MACvBD,GAAG,CAACI,IAAI,CAACD,GAAG,CAAC;MACb,OAAOA,GAAG;;IAEZ,OAAOH,GAAG,CAACN,KAAK,CAAC,CAAC,EAAEO,MAAM,CAAC;GAC5B,MAAM;IACL,IAAID,GAAG,CAACC,MAAM,GAAGA,MAAM,EAAE;MACvBD,GAAG,CAACI,IAAI,CAACD,GAAG,EAAEF,MAAM,GAAGD,GAAG,CAACC,MAAM,CAAC;MAClC,OAAOE,GAAG;;IAEZ,OAAOH,GAAG,CAACN,KAAK,CAAC,CAACO,MAAM,CAAC;;AAE7B,CAAC;AAED;;;;;;;AAOO,IAAMI,aAAa,GAAG,SAAhBA,aAAaA,CAAaL,GAAW,EAAEC,MAAc;EAChE,IAAAvB,SAAA,CAAA4B,cAAc,EAACN,GAAG,CAAC;EACnB,OAAOD,SAAS,CAACC,GAAG,EAAEC,MAAM,EAAE,KAAK,CAAC;AACtC,CAAC;AAHYb,OAAA,CAAAiB,aAAa,GAAAA,aAAA;AAK1B;;;;;;;AAOO,IAAME,cAAc,GAAG,SAAjBA,cAAcA,CAAaP,GAAW,EAAEC,MAAc;EACjE,IAAAvB,SAAA,CAAA4B,cAAc,EAACN,GAAG,CAAC;EACnB,OAAOD,SAAS,CAACC,GAAG,EAAEC,MAAM,EAAE,IAAI,CAAC;AACrC,CAAC;AAHYb,OAAA,CAAAmB,cAAc,GAAAA,cAAA;AAK3B;;;;;AAKA,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAaC,CAAM;EACjC,IAAIC,KAAK,GAAGD,CAAC,CAAC,CAAC,CAAC;EAChB,OAAOA,CAAC,CAACR,MAAM,GAAG,CAAC,IAAIS,KAAK,CAACvB,QAAQ,EAAE,KAAK,GAAG,EAAE;IAC/CsB,CAAC,GAAGA,CAAC,CAACf,KAAK,CAAC,CAAC,CAAC;IACdgB,KAAK,GAAGD,CAAC,CAAC,CAAC,CAAC;;EAEd,OAAOA,CAAC;AACV,CAAC;AAED;;;;;AAKO,IAAME,WAAW,GAAG,SAAdA,WAAWA,CAAaF,CAAS;EAC5C,IAAA/B,SAAA,CAAA4B,cAAc,EAACG,CAAC,CAAC;EACjB,OAAOD,UAAU,CAACC,CAAC,CAAW;AAChC,CAAC;AAHYrB,OAAA,CAAAuB,WAAW,GAAAA,WAAA;AAKxB;;;;;AAKO,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAaH,CAAW;EAC7C,IAAA/B,SAAA,CAAAmC,aAAa,EAACJ,CAAC,CAAC;EAChB,OAAOD,UAAU,CAACC,CAAC,CAAa;AAClC,CAAC;AAHYrB,OAAA,CAAAwB,UAAU,GAAAA,UAAA;AAKvB;;;;;AAKO,IAAME,cAAc,GAAG,SAAjBA,cAAcA,CAAaL,CAAS;EAC/C,IAAA/B,SAAA,CAAAqC,iBAAiB,EAACN,CAAC,CAAC;EACpBA,CAAC,GAAG,IAAA7B,UAAA,CAAAoC,cAAc,EAACP,CAAC,CAAC;EACrB,OAAQ,IAAI,GAAGD,UAAU,CAACC,CAAC,CAAC;AAC9B,CAAC;AAJYrB,OAAA,CAAA0B,cAAc,GAAAA,cAAA;AAkB3B;;;;;;AAMO,IAAMG,QAAQ,GAAG,SAAXA,QAAQA,CAAaC,CAAqB;EACrD,IAAIA,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAKC,SAAS,EAAE;IACjC,OAAO5B,MAAM,CAACM,WAAW,CAAC,CAAC,CAAC;;EAG9B,IAAIN,MAAM,CAAC6B,QAAQ,CAACF,CAAC,CAAC,EAAE;IACtB,OAAO3B,MAAM,CAACC,IAAI,CAAC0B,CAAC,CAAC;;EAGvB,IAAIG,KAAK,CAACC,OAAO,CAACJ,CAAC,CAAC,IAAIA,CAAC,YAAYK,UAAU,EAAE;IAC/C,OAAOhC,MAAM,CAACC,IAAI,CAAC0B,CAAe,CAAC;;EAGrC,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;IACzB,IAAI,CAAC,IAAAtC,UAAA,CAAA4C,WAAW,EAACN,CAAC,CAAC,EAAE;MACnB,MAAM,IAAIjC,KAAK,+GAAAC,MAAA,CACiGgC,CAAC,CAAE,CAClH;;IAEH,OAAO3B,MAAM,CAACC,IAAI,CAAC,IAAAZ,UAAA,CAAAa,SAAS,EAAC,IAAAb,UAAA,CAAAoC,cAAc,EAACE,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;;EAGzD,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;IACzB,OAAO,IAAA9B,OAAA,CAAAC,WAAW,EAAC6B,CAAC,CAAC;;EAGvB,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;IACzB,IAAIA,CAAC,GAAGO,MAAM,CAAC,CAAC,CAAC,EAAE;MACjB,MAAM,IAAIxC,KAAK,qDAAAC,MAAA,CAAqDgC,CAAC,CAAE,CAAC;;IAE1E,IAAIQ,CAAC,GAAGR,CAAC,CAAC/B,QAAQ,CAAC,EAAE,CAAC;IACtB,IAAIuC,CAAC,CAACzB,MAAM,GAAG,CAAC,EAAEyB,CAAC,GAAG,GAAG,GAAGA,CAAC;IAC7B,OAAOnC,MAAM,CAACC,IAAI,CAACkC,CAAC,EAAE,KAAK,CAAC;;EAG9B,IAAIR,CAAC,CAACS,OAAO,EAAE;IACb;IACA,OAAOpC,MAAM,CAACC,IAAI,CAAC0B,CAAC,CAACS,OAAO,EAAE,CAAC;;EAGjC,IAAIT,CAAC,CAACD,QAAQ,EAAE;IACd,OAAO1B,MAAM,CAACC,IAAI,CAAC0B,CAAC,CAACD,QAAQ,EAAE,CAAC;;EAGlC,MAAM,IAAIhC,KAAK,CAAC,cAAc,CAAC;AACjC,CAAC;AA7CYG,OAAA,CAAA6B,QAAQ,GAAAA,QAAA;AA+CrB;;;;AAIO,IAAMW,WAAW,GAAG,SAAdA,WAAWA,CAAazB,GAAW;EAC9CA,GAAG,GAAG,IAAAf,OAAA,CAAA6B,QAAQ,EAACd,GAAG,CAAC;EACnB,OAAO,IAAI,GAAGA,GAAG,CAAChB,QAAQ,CAAC,KAAK,CAAC;AACnC,CAAC;AAHYC,OAAA,CAAAwC,WAAW,GAAAA,WAAA;AAKxB;;;AAGA,SAAgBC,cAAcA,CAAC1B,GAAW;EACxC,IAAMb,GAAG,GAAG,IAAAF,OAAA,CAAAwC,WAAW,EAACzB,GAAG,CAAC;EAC5B,IAAIb,GAAG,KAAK,IAAI,EAAE;IAChB,OAAOmC,MAAM,CAAC,CAAC,CAAC;;EAElB,OAAOA,MAAM,CAACnC,GAAG,CAAC;AACpB;AANAF,OAAA,CAAAyC,cAAA,GAAAA,cAAA;AAQA;;;AAGA,SAAgBC,cAAcA,CAACC,GAAW;EACxC,OAAO,IAAA3C,OAAA,CAAA6B,QAAQ,EAAC,IAAI,GAAGc,GAAG,CAAC5C,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC1C;AAFAC,OAAA,CAAA0C,cAAA,GAAAA,cAAA;AAIA;;;;;AAKO,IAAME,WAAW,GAAG,SAAdA,WAAWA,CAAa7B,GAAW;EAC9C,IAAM8B,GAAG,GAAGlD,MAAM,CAAC8C,cAAc,CAAC1B,GAAG,CAAC,CAAC;EACvC,IAAI,CAACpB,MAAM,CAACC,aAAa,CAACiD,GAAG,CAAC,EAAE,MAAM,IAAIhD,KAAK,CAAC,wBAAwB,CAAC;EACzE,OAAOgD,GAAG;AACZ,CAAC;AAJY7C,OAAA,CAAA4C,WAAW,GAAAA,WAAA;AAMxB;;;;AAIO,IAAME,UAAU,GAAG,SAAbA,UAAUA,CAAaH,GAAW;EAC7C,OAAON,MAAM,CAACU,MAAM,CAAC,GAAG,EAAEN,cAAc,CAACE,GAAG,CAAC,CAAC;AAChD,CAAC;AAFY3C,OAAA,CAAA8C,UAAU,GAAAA,UAAA;AAIvB;;;;AAIO,IAAME,UAAU,GAAG,SAAbA,UAAUA,CAAaL,GAAW;EAC7C,OAAOD,cAAc,CAACL,MAAM,CAACY,OAAO,CAAC,GAAG,EAAEN,GAAG,CAAC,CAAC;AACjD,CAAC;AAFY3C,OAAA,CAAAgD,UAAU,GAAAA,UAAA;AAIvB;;;AAGO,IAAME,YAAY,GAAG,SAAfA,YAAYA,CAAaC,GAAW;EAC/C,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAOA,GAAG;;EAGZ,OAAO,IAAA3D,UAAA,CAAA4D,aAAa,EAACD,GAAG,CAAC,GAAGA,GAAG,GAAG,IAAI,GAAGA,GAAG;AAC9C,CAAC;AANYnD,OAAA,CAAAkD,YAAY,GAAAA,YAAA;AAQzB;;;;;;;;AAQA,SAAgBG,KAAKA,CAACC,MAAuB,EAAwB;EAAA,IAAtBC,SAAA,GAAAC,SAAA,CAAA3C,MAAA,QAAA2C,SAAA,QAAAzB,SAAA,GAAAyB,SAAA,MAAoB,EAAE;EACnE,IAAMC,SAAS,GAAGtD,MAAM,CAAC6B,QAAQ,CAACsB,MAAM,CAAC,GAAGA,MAAM,CAACvD,QAAQ,CAAC,KAAK,CAAC,GAAGuD,MAAM;EAC3E,IAAIG,SAAS,CAAC5C,MAAM,IAAI0C,SAAS,EAAE;IACjC,OAAOE,SAAS;;EAElB,OAAOA,SAAS,CAACnD,KAAK,CAAC,CAAC,EAAEiD,SAAS,CAAC,GAAG,GAAG;AAC5C;AANAvD,OAAA,CAAAqD,KAAA,GAAAA,KAAA;AAQA;;;;;;;;;;;;;;;;;AAiBO,IAAMK,MAAM,GAAG,SAATA,MAAMA,CAAaxD,GAAW;EACzC,IAAMyD,WAAW,GAAG,gBAAgB;EACpCzD,GAAG,GAAG,IAAAV,UAAA,CAAAoC,cAAc,EAAC1B,GAAG,CAAC;EACzB,IAAIA,GAAG,CAACW,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IACxB,MAAM,IAAIhB,KAAK,CAAC,yDAAyD,CAAC;;EAE5E,IAAM+D,SAAS,GAAGzD,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC2D,OAAO,CAACF,WAAW,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC;EAElE,OAAOC,SAAS,CAAC7D,QAAQ,CAAC,MAAM,CAAC;AACnC,CAAC;AATYC,OAAA,CAAA0D,MAAM,GAAAA,MAAA;AAWnB;;;;;AAKO,IAAMI,QAAQ,GAAG,SAAXA,QAAQA,CAAaC,EAAO;EACvC,IAAI5D,MAAM,CAAC6B,QAAQ,CAAC+B,EAAE,CAAC,EAAE;IACvB,YAAAjE,MAAA,CAAYiE,EAAE,CAAChE,QAAQ,CAAC,KAAK,CAAC;GAC/B,MAAM,IAAIgE,EAAE,YAAY9B,KAAK,EAAE;IAC9B,IAAM+B,KAAK,GAAG,EAAE;IAChB,KAAK,IAAItE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqE,EAAE,CAAClD,MAAM,EAAEnB,CAAC,EAAE,EAAE;MAClCsE,KAAK,CAACC,IAAI,CAAC,IAAAjE,OAAA,CAAA8D,QAAQ,EAACC,EAAE,CAACrE,CAAC,CAAC,CAAC,CAAC;;IAE7B,OAAOsE,KAAK;;AAEhB,CAAC;AAVYhE,OAAA,CAAA8D,QAAQ,GAAAA,QAAA;AAYrB;;;;;;;;;;;;;AAaO,IAAMI,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAaC,MAA6C;EAC5F,SAAAC,EAAA,MAAAC,eAAA,GAAqBC,MAAM,CAACC,OAAO,CAACJ,MAAM,CAAC,EAAAC,EAAA,GAAAC,eAAA,CAAAxD,MAAA,EAAAuD,EAAA,IAAE;IAAxC,IAAAI,kBAAA,GAAAC,cAAA,CAAAJ,eAAA,CAAAD,EAAA;MAAOM,CAAC,GAAAF,kBAAA;MAAE1C,CAAC,GAAA0C,kBAAA;IACd,IAAI1C,CAAC,KAAKC,SAAS,IAAID,CAAC,CAACjB,MAAM,GAAG,CAAC,IAAIiB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;MACjD,MAAM,IAAIjC,KAAK,IAAAC,MAAA,CAAI4E,CAAC,6CAAA5E,MAAA,CAA0CgC,CAAC,CAAC/B,QAAQ,CAAC,KAAK,CAAC,CAAE,CAAC;;;AAGxF,CAAC;AANYC,OAAA,CAAAkE,uBAAuB,GAAAA,uBAAA;AAcpC,SAAgBS,WAAWA,CAACC,GAAkC;EAC5D,IAAI,CAAC3C,KAAK,CAACC,OAAO,CAAC0C,GAAG,CAAC,EAAE;IACvB,OAAOzE,MAAM,CAACC,IAAI,CAACwE,GAAG,CAAC;;EAEzB,OAAOA,GAAG,CAACC,GAAG,CAAC,UAACxD,CAAC;IAAA,OAAKsD,WAAW,CAACtD,CAAC,CAAC;EAAA,EAAC;AACvC;AALArB,OAAA,CAAA2E,WAAA,GAAAA,WAAA;AAaA,SAAgBG,WAAWA,CAACF,GAA+B;EACzD,IAAI,CAAC3C,KAAK,CAACC,OAAO,CAAC0C,GAAG,CAAC,EAAE;IACvB,OAAOzC,UAAU,CAAC/B,IAAI,CAACwE,GAAG,aAAHA,GAAG,cAAHA,GAAG,GAAI,EAAE,CAAC;;EAEnC,OAAOA,GAAG,CAACC,GAAG,CAAC,UAACxD,CAAC;IAAA,OAAKyD,WAAW,CAACzD,CAAC,CAAC;EAAA,EAAC;AACvC;AALArB,OAAA,CAAA8E,WAAA,GAAAA,WAAA;AAOA;;;AAGO,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIpC,GAAW,EAAI;EACzC,OAAO,IAAI,GAAGA,GAAG,CAAC5C,QAAQ,CAAC,EAAE,CAAC;AAChC,CAAC;AAFYC,OAAA,CAAA+E,WAAW,GAAAA,WAAA;AAIxB;;;;;AAKA,SAAgBC,sBAAsBA,CAACC,KAAa;EAClD,OAAO,IAAAjF,OAAA,CAAAuB,WAAW,EAACmB,cAAc,CAACuC,KAAK,CAAC,CAAC;AAC3C;AAFAjF,OAAA,CAAAgF,sBAAA,GAAAA,sBAAA;AAIA,SAAgBE,mBAAmBA,CAACD,KAAa;EAC/C,OAAO,IAAAjF,OAAA,CAAAuB,WAAW,EAAC,IAAAvB,OAAA,CAAAC,WAAW,EAACgF,KAAK,CAAC,CAAC;AACxC;AAFAjF,OAAA,CAAAkF,mBAAA,GAAAA,mBAAA"},"metadata":{},"sourceType":"script"}