{"ast":null,"code":"import { CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from '@uniswap/sdk';\nimport { useMemo } from 'react';\nimport ERC20_INTERFACE from '../../constants/abis/erc20';\nimport { useAllTokens } from '../../hooks/Tokens';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useMulticallContract } from '../../hooks/useContract';\nimport { isAddress } from '../../utils';\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks';\n\n/**\r\n * Returns a map of the given addresses to their eventually consistent ETH balances.\r\n */\nexport function useETHBalances(uncheckedAddresses) {\n  var multicallContract = useMulticallContract();\n  var addresses = useMemo(function () {\n    return uncheckedAddresses ? uncheckedAddresses.map(isAddress).filter(function (a) {\n      return a !== false;\n    }).sort() : [];\n  }, [uncheckedAddresses]);\n  var results = useSingleContractMultipleData(multicallContract, 'getEthBalance', addresses.map(function (address) {\n    return [address];\n  }));\n  return useMemo(function () {\n    return addresses.reduce(function (memo, address, i) {\n      var _results$i, _results$i$result;\n      var value = results === null || results === void 0 ? void 0 : (_results$i = results[i]) === null || _results$i === void 0 ? void 0 : (_results$i$result = _results$i.result) === null || _results$i$result === void 0 ? void 0 : _results$i$result[0];\n      if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()));\n      return memo;\n    }, {});\n  }, [addresses, results]);\n}\n\n/**\r\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\r\n */\nexport function useTokenBalancesWithLoadingIndicator(address, tokens) {\n  var validatedTokens = useMemo(function () {\n    var _tokens$filter;\n    return (_tokens$filter = tokens === null || tokens === void 0 ? void 0 : tokens.filter(function (t) {\n      return isAddress(t === null || t === void 0 ? void 0 : t.address) !== false;\n    })) !== null && _tokens$filter !== void 0 ? _tokens$filter : [];\n  }, [tokens]);\n  var validatedTokenAddresses = useMemo(function () {\n    return validatedTokens.map(function (vt) {\n      return vt.address;\n    });\n  }, [validatedTokens]);\n  var balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address]);\n  var anyLoading = useMemo(function () {\n    return balances.some(function (callState) {\n      return callState.loading;\n    });\n  }, [balances]);\n  return [useMemo(function () {\n    return address && validatedTokens.length > 0 ? validatedTokens.reduce(function (memo, token, i) {\n      var _balances$i, _balances$i$result;\n      var value = balances === null || balances === void 0 ? void 0 : (_balances$i = balances[i]) === null || _balances$i === void 0 ? void 0 : (_balances$i$result = _balances$i.result) === null || _balances$i$result === void 0 ? void 0 : _balances$i$result[0];\n      var amount = value ? JSBI.BigInt(value.toString()) : undefined;\n      if (amount) {\n        memo[token.address] = new TokenAmount(token, amount);\n      }\n      return memo;\n    }, {}) : {};\n  }, [address, validatedTokens, balances]), anyLoading];\n}\nexport function useTokenBalances(address, tokens) {\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0];\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account, token) {\n  var tokenBalances = useTokenBalances(account, [token]);\n  if (!token) return undefined;\n  return tokenBalances[token.address];\n}\nexport function useCurrencyBalances(account, currencies) {\n  var tokens = useMemo(function () {\n    var _currencies$filter;\n    return (_currencies$filter = currencies === null || currencies === void 0 ? void 0 : currencies.filter(function (currency) {\n      return currency instanceof Token;\n    })) !== null && _currencies$filter !== void 0 ? _currencies$filter : [];\n  }, [currencies]);\n  var tokenBalances = useTokenBalances(account, tokens);\n  var containsETH = useMemo(function () {\n    var _currencies$some;\n    return (_currencies$some = currencies === null || currencies === void 0 ? void 0 : currencies.some(function (currency) {\n      return currency === ETHER;\n    })) !== null && _currencies$some !== void 0 ? _currencies$some : false;\n  }, [currencies]);\n  var ethBalance = useETHBalances(containsETH ? [account] : []);\n  return useMemo(function () {\n    var _currencies$map;\n    return (_currencies$map = currencies === null || currencies === void 0 ? void 0 : currencies.map(function (currency) {\n      if (!account || !currency) return undefined;\n      if (currency instanceof Token) return tokenBalances[currency.address];\n      if (currency === ETHER) return ethBalance[account];\n      return undefined;\n    })) !== null && _currencies$map !== void 0 ? _currencies$map : [];\n  }, [account, currencies, ethBalance, tokenBalances]);\n}\nexport function useCurrencyBalance(account, currency) {\n  return useCurrencyBalances(account, [currency])[0];\n}\n\n// mimics useAllBalances\nexport function useAllTokenBalances() {\n  var _useActiveWeb3React = useActiveWeb3React(),\n    account = _useActiveWeb3React.account;\n  var allTokens = useAllTokens();\n  var allTokensArray = useMemo(function () {\n    return Object.values(allTokens !== null && allTokens !== void 0 ? allTokens : {});\n  }, [allTokens]);\n  var balances = useTokenBalances(account !== null && account !== void 0 ? account : undefined, allTokensArray);\n  return balances !== null && balances !== void 0 ? balances : {};\n}","map":{"version":3,"names":["CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useMemo","ERC20_INTERFACE","useAllTokens","useActiveWeb3React","useMulticallContract","isAddress","useSingleContractMultipleData","useMultipleContractSingleData","useETHBalances","uncheckedAddresses","multicallContract","addresses","map","filter","a","sort","results","address","reduce","memo","i","_results$i","_results$i$result","value","result","ether","BigInt","toString","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","_tokens$filter","t","validatedTokenAddresses","vt","balances","anyLoading","some","callState","loading","length","token","_balances$i","_balances$i$result","amount","undefined","useTokenBalances","useTokenBalance","account","tokenBalances","useCurrencyBalances","currencies","_currencies$filter","currency","containsETH","_currencies$some","ethBalance","_currencies$map","useCurrencyBalance","useAllTokenBalances","_useActiveWeb3React","allTokens","allTokensArray","Object","values"],"sources":["E:/testprojects/CoolSwap-interface/src/state/wallet/hooks.ts"],"sourcesContent":["import { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from '@uniswap/sdk';\r\nimport { useMemo } from 'react';\r\nimport ERC20_INTERFACE from '../../constants/abis/erc20';\r\nimport { useAllTokens } from '../../hooks/Tokens';\r\nimport { useActiveWeb3React } from '../../hooks';\r\nimport { useMulticallContract } from '../../hooks/useContract';\r\nimport { isAddress } from '../../utils';\r\nimport { useSingleContractMultipleData, useMultipleContractSingleData } from '../multicall/hooks';\r\n\r\n/**\r\n * Returns a map of the given addresses to their eventually consistent ETH balances.\r\n */\r\nexport function useETHBalances(uncheckedAddresses?: (string | undefined)[]): {\r\n  [address: string]: CurrencyAmount | undefined;\r\n} {\r\n  const multicallContract = useMulticallContract();\r\n\r\n  const addresses: string[] = useMemo(\r\n    () =>\r\n      uncheckedAddresses\r\n        ? uncheckedAddresses\r\n            .map(isAddress)\r\n            .filter((a): a is string => a !== false)\r\n            .sort()\r\n        : [],\r\n    [uncheckedAddresses]\r\n  );\r\n\r\n  const results = useSingleContractMultipleData(\r\n    multicallContract,\r\n    'getEthBalance',\r\n    addresses.map((address) => [address])\r\n  );\r\n\r\n  return useMemo(\r\n    () =>\r\n      addresses.reduce<{ [address: string]: CurrencyAmount }>((memo, address, i) => {\r\n        const value = results?.[i]?.result?.[0];\r\n        if (value) memo[address] = CurrencyAmount.ether(JSBI.BigInt(value.toString()));\r\n        return memo;\r\n      }, {}),\r\n    [addresses, results]\r\n  );\r\n}\r\n\r\n/**\r\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\r\n */\r\nexport function useTokenBalancesWithLoadingIndicator(\r\n  address?: string,\r\n  tokens?: (Token | undefined)[]\r\n): [{ [tokenAddress: string]: TokenAmount | undefined }, boolean] {\r\n  const validatedTokens: Token[] = useMemo(\r\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\r\n    [tokens]\r\n  );\r\n\r\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map((vt) => vt.address), [validatedTokens]);\r\n\r\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20_INTERFACE, 'balanceOf', [address]);\r\n\r\n  const anyLoading: boolean = useMemo(() => balances.some((callState) => callState.loading), [balances]);\r\n\r\n  return [\r\n    useMemo(\r\n      () =>\r\n        address && validatedTokens.length > 0\r\n          ? validatedTokens.reduce<{ [tokenAddress: string]: TokenAmount | undefined }>((memo, token, i) => {\r\n              const value = balances?.[i]?.result?.[0];\r\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined;\r\n              if (amount) {\r\n                memo[token.address] = new TokenAmount(token, amount);\r\n              }\r\n              return memo;\r\n            }, {})\r\n          : {},\r\n      [address, validatedTokens, balances]\r\n    ),\r\n    anyLoading,\r\n  ];\r\n}\r\n\r\nexport function useTokenBalances(\r\n  address?: string,\r\n  tokens?: (Token | undefined)[]\r\n): { [tokenAddress: string]: TokenAmount | undefined } {\r\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0];\r\n}\r\n\r\n// get the balance for a single token/account combo\r\nexport function useTokenBalance(account?: string, token?: Token): TokenAmount | undefined {\r\n  const tokenBalances = useTokenBalances(account, [token]);\r\n  if (!token) return undefined;\r\n  return tokenBalances[token.address];\r\n}\r\n\r\nexport function useCurrencyBalances(\r\n  account?: string,\r\n  currencies?: (Currency | undefined)[]\r\n): (CurrencyAmount | undefined)[] {\r\n  const tokens = useMemo(\r\n    () => currencies?.filter((currency): currency is Token => currency instanceof Token) ?? [],\r\n    [currencies]\r\n  );\r\n\r\n  const tokenBalances = useTokenBalances(account, tokens);\r\n  const containsETH: boolean = useMemo(() => currencies?.some((currency) => currency === ETHER) ?? false, [currencies]);\r\n  const ethBalance = useETHBalances(containsETH ? [account] : []);\r\n\r\n  return useMemo(\r\n    () =>\r\n      currencies?.map((currency) => {\r\n        if (!account || !currency) return undefined;\r\n        if (currency instanceof Token) return tokenBalances[currency.address];\r\n        if (currency === ETHER) return ethBalance[account];\r\n        return undefined;\r\n      }) ?? [],\r\n    [account, currencies, ethBalance, tokenBalances]\r\n  );\r\n}\r\n\r\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount | undefined {\r\n  return useCurrencyBalances(account, [currency])[0];\r\n}\r\n\r\n// mimics useAllBalances\r\nexport function useAllTokenBalances(): { [tokenAddress: string]: TokenAmount | undefined } {\r\n  const { account } = useActiveWeb3React();\r\n  const allTokens = useAllTokens();\r\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens]);\r\n  const balances = useTokenBalances(account ?? undefined, allTokensArray);\r\n  return balances ?? {};\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}