{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\nvar textDecoder = new TextDecoder();\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nvar decodeText = function decodeText(bytes) {\n  return textDecoder.decode(bytes);\n};\nvar textEncoder = new TextEncoder();\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nvar encodeText = function encodeText(text) {\n  return textEncoder.encode(text);\n};\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\nfunction concat(arrs, length) {\n  var output = new Uint8Array(length);\n  var offset = 0;\n  var _iterator = _createForOfIteratorHelper(arrs),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var arr = _step.value;\n      output.set(arr, offset);\n      offset += arr.length;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return output;\n}\nmodule.exports = {\n  decodeText: decodeText,\n  encodeText: encodeText,\n  concat: concat\n};","map":{"version":3,"names":["_createForOfIteratorHelper","require","textDecoder","TextDecoder","decodeText","bytes","decode","textEncoder","TextEncoder","encodeText","text","encode","concat","arrs","length","output","Uint8Array","offset","_iterator","_step","s","n","done","arr","value","set","err","e","f","module","exports"],"sources":["E:/testprojects/CoolSwap-interface/node_modules/multibase/src/util.js"],"sourcesContent":["'use strict'\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrs, length) {\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrs) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = { decodeText, encodeText, concat }\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,0BAAA,GAAAC,OAAA;AAEZ,IAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,CAAC;AACrC;AACA;AACA;AACA;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,KAAK;EAAA,OAAKH,WAAW,CAACI,MAAM,CAACD,KAAK,CAAC;AAAA;AAEvD,IAAME,WAAW,GAAG,IAAIC,WAAW,CAAC,CAAC;AACrC;AACA;AACA;AACA;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,IAAI;EAAA,OAAKH,WAAW,CAACI,MAAM,CAACD,IAAI,CAAC;AAAA;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,MAAMA,CAAEC,IAAI,EAAEC,MAAM,EAAE;EAC7B,IAAMC,MAAM,GAAG,IAAIC,UAAU,CAACF,MAAM,CAAC;EACrC,IAAIG,MAAM,GAAG,CAAC;EAAA,IAAAC,SAAA,GAAAlB,0BAAA,CAEIa,IAAI;IAAAM,KAAA;EAAA;IAAtB,KAAAD,SAAA,CAAAE,CAAA,MAAAD,KAAA,GAAAD,SAAA,CAAAG,CAAA,IAAAC,IAAA,GAAwB;MAAA,IAAbC,GAAG,GAAAJ,KAAA,CAAAK,KAAA;MACZT,MAAM,CAACU,GAAG,CAACF,GAAG,EAAEN,MAAM,CAAC;MACvBA,MAAM,IAAIM,GAAG,CAACT,MAAM;IACtB;EAAC,SAAAY,GAAA;IAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;EAAA;IAAAR,SAAA,CAAAU,CAAA;EAAA;EAED,OAAOb,MAAM;AACf;AAEAc,MAAM,CAACC,OAAO,GAAG;EAAE1B,UAAU,EAAVA,UAAU;EAAEK,UAAU,EAAVA,UAAU;EAAEG,MAAM,EAANA;AAAO,CAAC"},"metadata":{},"sourceType":"script"}