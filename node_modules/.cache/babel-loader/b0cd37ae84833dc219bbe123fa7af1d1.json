{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nvar internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nvar assertIsHexString = function assertIsHexString(input) {\n  if (!(0, internal_1.isHexString)(input)) {\n    var msg = \"This method only supports 0x-prefixed hex strings but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nvar assertIsBuffer = function assertIsBuffer(input) {\n  if (!Buffer.isBuffer(input)) {\n    var msg = \"This method only supports Buffer but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nvar assertIsArray = function assertIsArray(input) {\n  if (!Array.isArray(input)) {\n    var msg = \"This method only supports number arrays but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nvar assertIsString = function assertIsString(input) {\n  if (typeof input !== 'string') {\n    var msg = \"This method only supports strings but input was: \".concat(input);\n    throw new Error(msg);\n  }\n};\nexports.assertIsString = assertIsString;","map":{"version":3,"names":["internal_1","require","assertIsHexString","input","isHexString","msg","concat","Error","exports","assertIsBuffer","Buffer","isBuffer","assertIsArray","Array","isArray","assertIsString"],"sources":["../src/helpers.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAEA;;;;AAIO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAaC,KAAa;EACtD,IAAI,CAAC,IAAAH,UAAA,CAAAI,WAAW,EAACD,KAAK,CAAC,EAAE;IACvB,IAAME,GAAG,uEAAAC,MAAA,CAAuEH,KAAK,CAAE;IACvF,MAAM,IAAII,KAAK,CAACF,GAAG,CAAC;;AAExB,CAAC;AALYG,OAAA,CAAAN,iBAAiB,GAAAA,iBAAA;AAO9B;;;;AAIO,IAAMO,cAAc,GAAG,SAAjBA,cAAcA,CAAaN,KAAa;EACnD,IAAI,CAACO,MAAM,CAACC,QAAQ,CAACR,KAAK,CAAC,EAAE;IAC3B,IAAME,GAAG,sDAAAC,MAAA,CAAsDH,KAAK,CAAE;IACtE,MAAM,IAAII,KAAK,CAACF,GAAG,CAAC;;AAExB,CAAC;AALYG,OAAA,CAAAC,cAAc,GAAAA,cAAA;AAO3B;;;;AAIO,IAAMG,aAAa,GAAG,SAAhBA,aAAaA,CAAaT,KAAe;EACpD,IAAI,CAACU,KAAK,CAACC,OAAO,CAACX,KAAK,CAAC,EAAE;IACzB,IAAME,GAAG,6DAAAC,MAAA,CAA6DH,KAAK,CAAE;IAC7E,MAAM,IAAII,KAAK,CAACF,GAAG,CAAC;;AAExB,CAAC;AALYG,OAAA,CAAAI,aAAa,GAAAA,aAAA;AAO1B;;;;AAIO,IAAMG,cAAc,GAAG,SAAjBA,cAAcA,CAAaZ,KAAa;EACnD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,IAAME,GAAG,uDAAAC,MAAA,CAAuDH,KAAK,CAAE;IACvE,MAAM,IAAII,KAAK,CAACF,GAAG,CAAC;;AAExB,CAAC;AALYG,OAAA,CAAAO,cAAc,GAAAA,cAAA"},"metadata":{},"sourceType":"script"}