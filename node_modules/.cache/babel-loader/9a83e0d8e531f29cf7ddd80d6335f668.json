{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\nvar _slicedToArray = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createHasher = exports.isogenyMap = exports.hash_to_field = exports.expand_message_xof = exports.expand_message_xmd = void 0;\nvar modular_js_1 = require(\"./modular.js\");\nvar utils_js_1 = require(\"./utils.js\");\nfunction validateDST(dst) {\n  if (dst instanceof Uint8Array) return dst;\n  if (typeof dst === 'string') return (0, utils_js_1.utf8ToBytes)(dst);\n  throw new Error('DST must be Uint8Array or string');\n}\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nvar os2ip = utils_js_1.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n  if (value < 0 || value >= 1 << 8 * length) {\n    throw new Error(\"bad I2OSP call: value=\".concat(value, \" length=\").concat(length));\n  }\n  var res = Array.from({\n    length: length\n  }).fill(0);\n  for (var i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n  var arr = new Uint8Array(a.length);\n  for (var i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\nfunction isBytes(item) {\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\n}\nfunction isNum(item) {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  if (DST.length > 255) DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n  var b_in_bytes = H.outputLen,\n    r_in_bytes = H.blockLen;\n  var ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  var DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));\n  var Z_pad = i2osp(0, r_in_bytes);\n  var l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  var b = new Array(ell);\n  var b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n  for (var i = 1; i <= ell; i++) {\n    var args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H((0, utils_js_1.concatBytes).apply(void 0, args));\n  }\n  var pseudo_random_bytes = (0, utils_js_1.concatBytes).apply(void 0, b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\nexports.expand_message_xmd = expand_message_xmd;\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    var dkLen = Math.ceil(2 * k / 8);\n    DST = H.create({\n      dkLen: dkLen\n    }).update((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255) throw new Error('expand_message_xof: invalid lenInBytes');\n  return H.create({\n    dkLen: lenInBytes\n  }).update(msg).update(i2osp(lenInBytes, 2))\n  // 2. DST_prime = DST || I2OSP(len(DST), 1)\n  .update(DST).update(i2osp(DST.length, 1)).digest();\n}\nexports.expand_message_xof = expand_message_xof;\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n  (0, utils_js_1.validateObject)(options, {\n    DST: 'string',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash'\n  });\n  var p = options.p,\n    k = options.k,\n    m = options.m,\n    hash = options.hash,\n    expand = options.expand,\n    _DST = options.DST;\n  isBytes(msg);\n  isNum(count);\n  var DST = validateDST(_DST);\n  var log2p = p.toString(2).length;\n  var L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  var len_in_bytes = count * m * L;\n  var prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  var u = new Array(count);\n  for (var i = 0; i < count; i++) {\n    var e = new Array(m);\n    for (var j = 0; j < m; j++) {\n      var elm_offset = L * (j + i * m);\n      var tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = (0, modular_js_1.mod)(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\nexports.hash_to_field = hash_to_field;\nfunction isogenyMap(field, map) {\n  // Make same order as in spec\n  var COEFF = map.map(function (i) {\n    return Array.from(i).reverse();\n  });\n  return function (x, y) {\n    var _COEFF$map = COEFF.map(function (val) {\n        return val.reduce(function (acc, i) {\n          return field.add(field.mul(acc, x), i);\n        });\n      }),\n      _COEFF$map2 = _slicedToArray(_COEFF$map, 4),\n      xNum = _COEFF$map2[0],\n      xDen = _COEFF$map2[1],\n      yNum = _COEFF$map2[2],\n      yDen = _COEFF$map2[3];\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return {\n      x: x,\n      y: y\n    };\n  };\n}\nexports.isogenyMap = isogenyMap;\nfunction createHasher(Point, mapToCurve, def) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    hashToCurve: function hashToCurve(msg, options) {\n      var u = hash_to_field(msg, 2, _objectSpread(_objectSpread({}, def), {}, {\n        DST: def.DST\n      }, options));\n      var u0 = Point.fromAffine(mapToCurve(u[0]));\n      var u1 = Point.fromAffine(mapToCurve(u[1]));\n      var P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    encodeToCurve: function encodeToCurve(msg, options) {\n      var u = hash_to_field(msg, 1, _objectSpread(_objectSpread({}, def), {}, {\n        DST: def.encodeDST\n      }, options));\n      var P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    }\n  };\n}\nexports.createHasher = createHasher;","map":{"version":3,"names":["modular_js_1","require","utils_js_1","validateDST","dst","Uint8Array","utf8ToBytes","Error","os2ip","bytesToNumberBE","i2osp","value","length","concat","res","Array","from","fill","i","strxor","a","b","arr","isBytes","item","isNum","Number","isSafeInteger","expand_message_xmd","msg","DST","lenInBytes","H","concatBytes","b_in_bytes","outputLen","r_in_bytes","blockLen","ell","Math","ceil","DST_prime","Z_pad","l_i_b_str","b_0","args","apply","pseudo_random_bytes","slice","exports","expand_message_xof","k","dkLen","create","update","digest","hash_to_field","count","options","validateObject","p","m","hash","expand","_DST","log2p","toString","L","len_in_bytes","prb","u","e","j","elm_offset","tv","subarray","mod","isogenyMap","field","map","COEFF","reverse","x","y","_COEFF$map","val","reduce","acc","add","mul","_COEFF$map2","_slicedToArray","xNum","xDen","yNum","yDen","div","createHasher","Point","mapToCurve","def","hashToCurve","_objectSpread","u0","fromAffine","u1","P","clearCofactor","assertValidity","encodeToCurve","encodeDST"],"sources":["../src/abstract/hash-to-curve.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}