{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nvar defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport var AlchemyWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {\n  _inherits(AlchemyWebSocketProvider, _WebSocketProvider);\n  var _super = _createSuper(AlchemyWebSocketProvider);\n  function AlchemyWebSocketProvider(network, apiKey) {\n    var _this;\n    _classCallCheck(this, AlchemyWebSocketProvider);\n    var provider = new AlchemyProvider(network, apiKey);\n    var url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n    _this = _super.call(this, url, provider.network);\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", provider.apiKey);\n    return _this;\n  }\n  _createClass(AlchemyWebSocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }]);\n  return AlchemyWebSocketProvider;\n}(WebSocketProvider);\nexport var AlchemyProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(AlchemyProvider, _UrlJsonRpcProvider);\n  var _super2 = _createSuper(AlchemyProvider);\n  function AlchemyProvider() {\n    _classCallCheck(this, AlchemyProvider);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(AlchemyProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }], [{\n    key: \"getWebSocketProvider\",\n    value: function getWebSocketProvider(network, apiKey) {\n      return new AlchemyWebSocketProvider(network, apiKey);\n    }\n  }, {\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      if (apiKey == null) {\n        return defaultApiKey;\n      }\n      if (apiKey && typeof apiKey !== \"string\") {\n        logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n      }\n      return apiKey;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n      switch (network.name) {\n        case \"homestead\":\n          host = \"eth-mainnet.alchemyapi.io/v2/\";\n          break;\n        case \"goerli\":\n          host = \"eth-goerli.g.alchemy.com/v2/\";\n          break;\n        case \"matic\":\n          host = \"polygon-mainnet.g.alchemy.com/v2/\";\n          break;\n        case \"maticmum\":\n          host = \"polygon-mumbai.g.alchemy.com/v2/\";\n          break;\n        case \"arbitrum\":\n          host = \"arb-mainnet.g.alchemy.com/v2/\";\n          break;\n        case \"arbitrum-goerli\":\n          host = \"arb-goerli.g.alchemy.com/v2/\";\n          break;\n        case \"optimism\":\n          host = \"opt-mainnet.g.alchemy.com/v2/\";\n          break;\n        case \"optimism-goerli\":\n          host = \"opt-goerli.g.alchemy.com/v2/\";\n          break;\n        default:\n          logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n      }\n      return {\n        allowGzip: true,\n        url: \"https:/\" + \"/\" + host + apiKey,\n        throttleCallback: function throttleCallback(attempt, url) {\n          if (apiKey === defaultApiKey) {\n            showThrottleMessage();\n          }\n          return Promise.resolve(true);\n        }\n      };\n    }\n  }]);\n  return AlchemyProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"names":["_classCallCheck","_createClass","_assertThisInitialized","_inherits","_createSuper","defineReadOnly","showThrottleMessage","WebSocketProvider","Logger","version","logger","UrlJsonRpcProvider","defaultApiKey","AlchemyWebSocketProvider","_WebSocketProvider","_super","network","apiKey","_this","provider","AlchemyProvider","url","connection","replace","call","key","value","isCommunityResource","_UrlJsonRpcProvider","_super2","apply","arguments","getWebSocketProvider","getApiKey","throwArgumentError","getUrl","host","name","allowGzip","throttleCallback","attempt","Promise","resolve"],"sources":["../src.ts/alchemy-provider.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}