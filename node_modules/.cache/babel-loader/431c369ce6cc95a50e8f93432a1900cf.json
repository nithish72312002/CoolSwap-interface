{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toType = exports.TypeOutput = void 0;\nvar bytes_1 = require(\"./bytes\");\nvar internal_1 = require(\"./internal\");\n/**\n * Type output options\n */\nvar TypeOutput;\n(function (TypeOutput) {\n  TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n  TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n  TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n  TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\nfunction toType(input, outputType) {\n  if (input === null) {\n    return null;\n  }\n  if (input === undefined) {\n    return undefined;\n  }\n  if (typeof input === 'string' && !(0, internal_1.isHexString)(input)) {\n    throw new Error(\"A string must be provided with a 0x-prefix, given: \".concat(input));\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n  var output = (0, bytes_1.toBuffer)(input);\n  switch (outputType) {\n    case TypeOutput.Buffer:\n      return output;\n    case TypeOutput.BigInt:\n      return (0, bytes_1.bufferToBigInt)(output);\n    case TypeOutput.Number:\n      {\n        var bigInt = (0, bytes_1.bufferToBigInt)(output);\n        if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n          throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n        }\n        return Number(bigInt);\n      }\n    case TypeOutput.PrefixedHexString:\n      return (0, bytes_1.bufferToHex)(output);\n    default:\n      throw new Error('unknown outputType');\n  }\n}\nexports.toType = toType;","map":{"version":3,"names":["bytes_1","require","internal_1","TypeOutput","exports","toType","input","outputType","undefined","isHexString","Error","concat","Number","isSafeInteger","output","toBuffer","Buffer","BigInt","bufferToBigInt","bigInt","MAX_SAFE_INTEGER","PrefixedHexString","bufferToHex"],"sources":["../src/types.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AAmDA;;;AAGA,IAAYE,UAKX;AALD,WAAYA,UAAU;EACpBA,UAAA,CAAAA,UAAA,0BAAM;EACNA,UAAA,CAAAA,UAAA,0BAAM;EACNA,UAAA,CAAAA,UAAA,0BAAM;EACNA,UAAA,CAAAA,UAAA,gDAAiB;AACnB,CAAC,EALWA,UAAU,GAAVC,OAAA,CAAAD,UAAU,KAAVC,OAAA,CAAAD,UAAU;AA0BtB,SAAgBE,MAAMA,CACpBC,KAAyB,EACzBC,UAAa;EAEb,IAAID,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO,IAAI;;EAEb,IAAIA,KAAK,KAAKE,SAAS,EAAE;IACvB,OAAOA,SAAS;;EAGlB,IAAI,OAAOF,KAAK,KAAK,QAAQ,IAAI,CAAC,IAAAJ,UAAA,CAAAO,WAAW,EAACH,KAAK,CAAC,EAAE;IACpD,MAAM,IAAII,KAAK,uDAAAC,MAAA,CAAuDL,KAAK,CAAE,CAAC;GAC/E,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACM,MAAM,CAACC,aAAa,CAACP,KAAK,CAAC,EAAE;IACpE,MAAM,IAAII,KAAK,CACb,6FAA6F,CAC9F;;EAGH,IAAMI,MAAM,GAAG,IAAAd,OAAA,CAAAe,QAAQ,EAACT,KAAK,CAAC;EAE9B,QAAQC,UAAU;IAChB,KAAKJ,UAAU,CAACa,MAAM;MACpB,OAAOF,MAAiC;IAC1C,KAAKX,UAAU,CAACc,MAAM;MACpB,OAAO,IAAAjB,OAAA,CAAAkB,cAAc,EAACJ,MAAM,CAA4B;IAC1D,KAAKX,UAAU,CAACS,MAAM;MAAE;QACtB,IAAMO,MAAM,GAAG,IAAAnB,OAAA,CAAAkB,cAAc,EAACJ,MAAM,CAAC;QACrC,IAAIK,MAAM,GAAGF,MAAM,CAACL,MAAM,CAACQ,gBAAgB,CAAC,EAAE;UAC5C,MAAM,IAAIV,KAAK,CACb,8FAA8F,CAC/F;;QAEH,OAAOE,MAAM,CAACO,MAAM,CAA4B;;IAElD,KAAKhB,UAAU,CAACkB,iBAAiB;MAC/B,OAAO,IAAArB,OAAA,CAAAsB,WAAW,EAACR,MAAM,CAA4B;IACvD;MACE,MAAM,IAAIJ,KAAK,CAAC,oBAAoB,CAAC;;AAE3C;AAxCAN,OAAA,CAAAC,MAAA,GAAAA,MAAA"},"metadata":{},"sourceType":"script"}