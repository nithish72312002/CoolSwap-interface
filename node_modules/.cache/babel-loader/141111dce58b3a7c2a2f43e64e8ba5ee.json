{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountBodyToRLP = exports.accountBodyToSlim = exports.accountBodyFromSlim = exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nvar rlp_1 = require(\"@ethereumjs/rlp\");\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nvar utils_1 = require(\"ethereum-cryptography/utils\");\nvar bytes_1 = require(\"./bytes\");\nvar constants_1 = require(\"./constants\");\nvar helpers_1 = require(\"./helpers\");\nvar internal_1 = require(\"./internal\");\nvar _0n = BigInt(0);\nvar Account = /*#__PURE__*/function () {\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating an Account from varying data types.\n   */\n  function Account() {\n    var nonce = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _0n;\n    var balance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _0n;\n    var storageRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_1.KECCAK256_RLP;\n    var codeHash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_1.KECCAK256_NULL;\n    _classCallCheck(this, Account);\n    this.nonce = nonce;\n    this.balance = balance;\n    this.storageRoot = storageRoot;\n    this.codeHash = codeHash;\n    this._validate();\n  }\n  _createClass(Account, [{\n    key: \"_validate\",\n    value: function _validate() {\n      if (this.nonce < _0n) {\n        throw new Error('nonce must be greater than zero');\n      }\n      if (this.balance < _0n) {\n        throw new Error('balance must be greater than zero');\n      }\n      if (this.storageRoot.length !== 32) {\n        throw new Error('storageRoot must have a length of 32');\n      }\n      if (this.codeHash.length !== 32) {\n        throw new Error('codeHash must have a length of 32');\n      }\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers for the account, in order.\n     */\n  }, {\n    key: \"raw\",\n    value: function raw() {\n      return [(0, bytes_1.bigIntToUnpaddedBuffer)(this.nonce), (0, bytes_1.bigIntToUnpaddedBuffer)(this.balance), this.storageRoot, this.codeHash];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Buffer`.\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return Buffer.from(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)(this.raw())));\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n  }, {\n    key: \"isContract\",\n    value: function isContract() {\n      return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.balance === _0n && this.nonce === _0n && this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n  }], [{\n    key: \"fromAccountData\",\n    value: function fromAccountData(accountData) {\n      var nonce = accountData.nonce,\n        balance = accountData.balance,\n        storageRoot = accountData.storageRoot,\n        codeHash = accountData.codeHash;\n      return new Account(nonce !== undefined ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(nonce)) : undefined, balance !== undefined ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(balance)) : undefined, storageRoot !== undefined ? (0, bytes_1.toBuffer)(storageRoot) : undefined, codeHash !== undefined ? (0, bytes_1.toBuffer)(codeHash) : undefined);\n    }\n  }, {\n    key: \"fromRlpSerializedAccount\",\n    value: function fromRlpSerializedAccount(serialized) {\n      var values = (0, bytes_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized)));\n      if (!Array.isArray(values)) {\n        throw new Error('Invalid serialized account input. Must be array');\n      }\n      return this.fromValuesArray(values);\n    }\n  }, {\n    key: \"fromValuesArray\",\n    value: function fromValuesArray(values) {\n      var _values = _slicedToArray(values, 4),\n        nonce = _values[0],\n        balance = _values[1],\n        storageRoot = _values[2],\n        codeHash = _values[3];\n      return new Account((0, bytes_1.bufferToBigInt)(nonce), (0, bytes_1.bufferToBigInt)(balance), storageRoot, codeHash);\n    }\n  }]);\n  return Account;\n}();\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nvar isValidAddress = function isValidAddress(hexAddress) {\n  try {\n    (0, helpers_1.assertIsString)(hexAddress);\n  } catch (e) {\n    return false;\n  }\n  return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nvar toChecksumAddress = function toChecksumAddress(hexAddress, eip1191ChainId) {\n  (0, helpers_1.assertIsHexString)(hexAddress);\n  var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();\n  var prefix = '';\n  if (eip1191ChainId !== undefined) {\n    var chainId = (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(eip1191ChainId));\n    prefix = chainId.toString() + '0x';\n  }\n  var buf = Buffer.from(prefix + address, 'utf8');\n  var hash = (0, utils_1.bytesToHex)((0, keccak_1.keccak256)(buf));\n  var ret = '0x';\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n  return ret;\n};\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nvar isValidChecksumAddress = function isValidChecksumAddress(hexAddress, eip1191ChainId) {\n  return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nvar generateAddress = function generateAddress(from, nonce) {\n  (0, helpers_1.assertIsBuffer)(from);\n  (0, helpers_1.assertIsBuffer)(nonce);\n  if ((0, bytes_1.bufferToBigInt)(nonce) === BigInt(0)) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([from, null])))).slice(-20);\n  }\n  // Only take the lower 160bits of the hash\n  return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([from, nonce])))).slice(-20);\n};\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nvar generateAddress2 = function generateAddress2(from, salt, initCode) {\n  (0, helpers_1.assertIsBuffer)(from);\n  (0, helpers_1.assertIsBuffer)(salt);\n  (0, helpers_1.assertIsBuffer)(initCode);\n  if (from.length !== 20) {\n    throw new Error('Expected from to be of length 20');\n  }\n  if (salt.length !== 32) {\n    throw new Error('Expected salt to be of length 32');\n  }\n  var address = (0, keccak_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, keccak_1.keccak256)(initCode)]));\n  return (0, bytes_1.toBuffer)(address).slice(-20);\n};\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nvar isValidPrivate = function isValidPrivate(privateKey) {\n  return secp256k1_1.secp256k1.utils.isValidPrivateKey(privateKey);\n};\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nvar isValidPublic = function isValidPublic(publicKey) {\n  var sanitize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  (0, helpers_1.assertIsBuffer)(publicKey);\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    // Automatically checks whether point is on curve\n    try {\n      secp256k1_1.secp256k1.ProjectivePoint.fromHex(Buffer.concat([Buffer.from([4]), publicKey]));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  if (!sanitize) {\n    return false;\n  }\n  try {\n    secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKey);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nvar pubToAddress = function pubToAddress(pubKey) {\n  var sanitize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  (0, helpers_1.assertIsBuffer)(pubKey);\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1));\n  }\n  if (pubKey.length !== 64) {\n    throw new Error('Expected pubKey to be of length 64');\n  }\n  // Only take the lower 160bits of the hash\n  return Buffer.from((0, keccak_1.keccak256)(pubKey)).slice(-20);\n};\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nvar privateToPublic = function privateToPublic(privateKey) {\n  (0, helpers_1.assertIsBuffer)(privateKey);\n  // skip the type flag and use the X, Y points\n  return Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1));\n};\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nvar privateToAddress = function privateToAddress(privateKey) {\n  return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */\nvar importPublic = function importPublic(publicKey) {\n  (0, helpers_1.assertIsBuffer)(publicKey);\n  if (publicKey.length !== 64) {\n    publicKey = Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1));\n  }\n  return publicKey;\n};\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */\nvar zeroAddress = function zeroAddress() {\n  var addressLength = 20;\n  var addr = (0, bytes_1.zeros)(addressLength);\n  return (0, bytes_1.bufferToHex)(addr);\n};\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */\nvar isZeroAddress = function isZeroAddress(hexAddress) {\n  try {\n    (0, helpers_1.assertIsString)(hexAddress);\n  } catch (e) {\n    return false;\n  }\n  var zeroAddr = (0, exports.zeroAddress)();\n  return zeroAddr === hexAddress;\n};\nexports.isZeroAddress = isZeroAddress;\nfunction accountBodyFromSlim(body) {\n  var _body = _slicedToArray(body, 4),\n    nonce = _body[0],\n    balance = _body[1],\n    storageRoot = _body[2],\n    codeHash = _body[3];\n  return [nonce, balance, (0, bytes_1.arrToBufArr)(storageRoot).length === 0 ? constants_1.KECCAK256_RLP : storageRoot, (0, bytes_1.arrToBufArr)(codeHash).length === 0 ? constants_1.KECCAK256_NULL : codeHash];\n}\nexports.accountBodyFromSlim = accountBodyFromSlim;\nvar emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n  var _body2 = _slicedToArray(body, 4),\n    nonce = _body2[0],\n    balance = _body2[1],\n    storageRoot = _body2[2],\n    codeHash = _body2[3];\n  return [nonce, balance, (0, bytes_1.arrToBufArr)(storageRoot).equals(constants_1.KECCAK256_RLP) ? emptyUint8Arr : storageRoot, (0, bytes_1.arrToBufArr)(codeHash).equals(constants_1.KECCAK256_NULL) ? emptyUint8Arr : codeHash];\n}\nexports.accountBodyToSlim = accountBodyToSlim;\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Buffer-like items to represent the account\n * @returns RLP encoded version of the account\n */\nfunction accountBodyToRLP(body) {\n  var couldBeSlim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n  return (0, bytes_1.arrToBufArr)(rlp_1.RLP.encode(accountBody));\n}\nexports.accountBodyToRLP = accountBodyToRLP;","map":{"version":3,"names":["rlp_1","require","keccak_1","secp256k1_1","utils_1","bytes_1","constants_1","helpers_1","internal_1","_0n","BigInt","Account","nonce","arguments","length","undefined","balance","storageRoot","KECCAK256_RLP","codeHash","KECCAK256_NULL","_classCallCheck","_validate","_createClass","key","value","Error","raw","bigIntToUnpaddedBuffer","serialize","Buffer","from","RLP","encode","bufArrToArr","isContract","equals","isEmpty","fromAccountData","accountData","bufferToBigInt","toBuffer","fromRlpSerializedAccount","serialized","values","arrToBufArr","decode","Uint8Array","Array","isArray","fromValuesArray","_values","_slicedToArray","exports","isValidAddress","hexAddress","assertIsString","e","test","toChecksumAddress","eip1191ChainId","assertIsHexString","address","stripHexPrefix","toLowerCase","prefix","chainId","toString","buf","hash","bytesToHex","keccak256","ret","i","parseInt","toUpperCase","isValidChecksumAddress","generateAddress","assertIsBuffer","slice","generateAddress2","salt","initCode","concat","isValidPrivate","privateKey","secp256k1","utils","isValidPrivateKey","isValidPublic","publicKey","sanitize","ProjectivePoint","fromHex","pubToAddress","pubKey","toRawBytes","publicToAddress","privateToPublic","fromPrivateKey","privateToAddress","importPublic","zeroAddress","addressLength","addr","zeros","bufferToHex","isZeroAddress","zeroAddr","accountBodyFromSlim","body","_body","emptyUint8Arr","accountBodyToSlim","_body2","accountBodyToRLP","couldBeSlim","accountBody"],"sources":["../src/account.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}