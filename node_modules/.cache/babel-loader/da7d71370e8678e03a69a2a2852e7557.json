{"ast":null,"code":"import { ZERO_PERCENT, ONE_HUNDRED_PERCENT } from './../constants/index';\nimport { currencyEquals } from '@uniswap/sdk';\n\n// returns whether tradeB is better than tradeA by at least a threshold percentage amount\nexport function isTradeBetter(tradeA, tradeB) {\n  var minimumDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ZERO_PERCENT;\n  if (tradeA && !tradeB) return false;\n  if (tradeB && !tradeA) return true;\n  if (!tradeA || !tradeB) return undefined;\n  if (tradeA.tradeType !== tradeB.tradeType || !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) || !currencyEquals(tradeB.outputAmount.currency, tradeB.outputAmount.currency)) {\n    throw new Error('Trades are not comparable');\n  }\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice);\n  } else {\n    return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice);\n  }\n}","map":{"version":3,"names":["ZERO_PERCENT","ONE_HUNDRED_PERCENT","currencyEquals","isTradeBetter","tradeA","tradeB","minimumDelta","arguments","length","undefined","tradeType","inputAmount","currency","outputAmount","Error","equalTo","executionPrice","lessThan","raw","multiply","add"],"sources":["E:/testprojects/CoolSwap-interface/src/utils/trades.ts"],"sourcesContent":["import { ZERO_PERCENT, ONE_HUNDRED_PERCENT } from './../constants/index';\r\nimport { Trade, Percent, currencyEquals } from '@uniswap/sdk';\r\n\r\n// returns whether tradeB is better than tradeA by at least a threshold percentage amount\r\nexport function isTradeBetter(\r\n  tradeA: Trade | undefined | null,\r\n  tradeB: Trade | undefined | null,\r\n  minimumDelta: Percent = ZERO_PERCENT\r\n): boolean | undefined {\r\n  if (tradeA && !tradeB) return false;\r\n  if (tradeB && !tradeA) return true;\r\n  if (!tradeA || !tradeB) return undefined;\r\n\r\n  if (\r\n    tradeA.tradeType !== tradeB.tradeType ||\r\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\r\n    !currencyEquals(tradeB.outputAmount.currency, tradeB.outputAmount.currency)\r\n  ) {\r\n    throw new Error('Trades are not comparable');\r\n  }\r\n\r\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\r\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice);\r\n  } else {\r\n    return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,mBAAmB,QAAQ,sBAAsB;AACxE,SAAyBC,cAAc,QAAQ,cAAc;;AAE7D;AACA,OAAO,SAASC,aAAaA,CAC3BC,MAAgC,EAChCC,MAAgC,EAEX;EAAA,IADrBC,YAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAEpC,IAAII,MAAM,IAAI,CAACC,MAAM,EAAE,OAAO,KAAK;EACnC,IAAIA,MAAM,IAAI,CAACD,MAAM,EAAE,OAAO,IAAI;EAClC,IAAI,CAACA,MAAM,IAAI,CAACC,MAAM,EAAE,OAAOI,SAAS;EAExC,IACEL,MAAM,CAACM,SAAS,KAAKL,MAAM,CAACK,SAAS,IACrC,CAACR,cAAc,CAACE,MAAM,CAACO,WAAW,CAACC,QAAQ,EAAEP,MAAM,CAACM,WAAW,CAACC,QAAQ,CAAC,IACzE,CAACV,cAAc,CAACG,MAAM,CAACQ,YAAY,CAACD,QAAQ,EAAEP,MAAM,CAACQ,YAAY,CAACD,QAAQ,CAAC,EAC3E;IACA,MAAM,IAAIE,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,IAAIR,YAAY,CAACS,OAAO,CAACf,YAAY,CAAC,EAAE;IACtC,OAAOI,MAAM,CAACY,cAAc,CAACC,QAAQ,CAACZ,MAAM,CAACW,cAAc,CAAC;EAC9D,CAAC,MAAM;IACL,OAAOZ,MAAM,CAACY,cAAc,CAACE,GAAG,CAACC,QAAQ,CAACb,YAAY,CAACc,GAAG,CAACnB,mBAAmB,CAAC,CAAC,CAACgB,QAAQ,CAACZ,MAAM,CAACW,cAAc,CAAC;EAClH;AACF"},"metadata":{},"sourceType":"module"}