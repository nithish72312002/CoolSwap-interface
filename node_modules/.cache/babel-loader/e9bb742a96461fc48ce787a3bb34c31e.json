{"ast":null,"code":"import _defineProperty from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _process$env$REACT_AP;\nimport { Web3Provider } from '@ethersproject/providers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\n// import { PortisConnector } from '@web3-react/portis-connector';\n// import { FortmaticConnector } from './Fortmatic';\nimport { NetworkConnector } from './NetworkConnector';\nvar REACT_APP_NETWORK_URL = process.env.REACT_APP_NETWORK_URL;\n// const FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY\n// const PORTIS_ID = process.env.REACT_APP_PORTIS_ID\n\nexport var NETWORK_CHAIN_ID = parseInt((_process$env$REACT_AP = process.env.REACT_APP_CHAIN_ID) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : '1');\nif (typeof REACT_APP_NETWORK_URL === 'undefined') {\n  throw new Error(\"REACT_APP_NETWORK_URL must be a defined environment variable\");\n}\nexport var network = new NetworkConnector({\n  urls: _defineProperty({}, NETWORK_CHAIN_ID, REACT_APP_NETWORK_URL)\n});\nvar networkLibrary;\nexport function getNetworkLibrary() {\n  var _networkLibrary;\n  return networkLibrary = (_networkLibrary = networkLibrary) !== null && _networkLibrary !== void 0 ? _networkLibrary : new Web3Provider(network.provider);\n}\nexport var injected = new InjectedConnector({\n  supportedChainIds: [1, 4, NETWORK_CHAIN_ID]\n});\n\n// mainnet only\nexport var walletconnect = new WalletConnectConnector({\n  rpc: {\n    1: REACT_APP_NETWORK_URL\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 15000\n});\n\n// mainnet only\n// export const fortmatic = new FortmaticConnector({\n//   apiKey: FORMATIC_KEY ?? '',\n//   chainId: 1\n// })\n\n// mainnet only\n// export const portis = new PortisConnector({\n//   dAppId: PORTIS_ID ?? '',\n//   networks: [1]\n// })\n\n// mainnet only\nexport var walletlink = new WalletLinkConnector({\n  url: REACT_APP_NETWORK_URL,\n  appName: 'Swap'\n  // appLogoUrl: '',\n});","map":{"version":3,"names":["Web3Provider","InjectedConnector","WalletConnectConnector","WalletLinkConnector","NetworkConnector","REACT_APP_NETWORK_URL","process","env","NETWORK_CHAIN_ID","parseInt","_process$env$REACT_AP","REACT_APP_CHAIN_ID","Error","network","urls","_defineProperty","networkLibrary","getNetworkLibrary","_networkLibrary","provider","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","walletlink","url","appName"],"sources":["E:/testprojects/CoolSwap-interface/src/connectors/index.ts"],"sourcesContent":["import { Web3Provider } from '@ethersproject/providers';\r\nimport { InjectedConnector } from '@web3-react/injected-connector';\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\r\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\r\n// import { PortisConnector } from '@web3-react/portis-connector';\r\n// import { FortmaticConnector } from './Fortmatic';\r\nimport { NetworkConnector } from './NetworkConnector';\r\n\r\nconst REACT_APP_NETWORK_URL = process.env.REACT_APP_NETWORK_URL;\r\n// const FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY\r\n// const PORTIS_ID = process.env.REACT_APP_PORTIS_ID\r\n\r\nexport const NETWORK_CHAIN_ID: number = parseInt(process.env.REACT_APP_CHAIN_ID ?? '1');\r\n\r\nif (typeof REACT_APP_NETWORK_URL === 'undefined') {\r\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`);\r\n}\r\n\r\nexport const network = new NetworkConnector({\r\n  urls: { [NETWORK_CHAIN_ID]: REACT_APP_NETWORK_URL },\r\n});\r\n\r\nlet networkLibrary: Web3Provider | undefined;\r\nexport function getNetworkLibrary(): Web3Provider {\r\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any));\r\n}\r\n\r\nexport const injected = new InjectedConnector({\r\n  supportedChainIds: [1, 4, NETWORK_CHAIN_ID],\r\n});\r\n\r\n// mainnet only\r\nexport const walletconnect = new WalletConnectConnector({\r\n  rpc: { 1: REACT_APP_NETWORK_URL },\r\n  bridge: 'https://bridge.walletconnect.org',\r\n  qrcode: true,\r\n  pollingInterval: 15000,\r\n});\r\n\r\n// mainnet only\r\n// export const fortmatic = new FortmaticConnector({\r\n//   apiKey: FORMATIC_KEY ?? '',\r\n//   chainId: 1\r\n// })\r\n\r\n// mainnet only\r\n// export const portis = new PortisConnector({\r\n//   dAppId: PORTIS_ID ?? '',\r\n//   networks: [1]\r\n// })\r\n\r\n// mainnet only\r\nexport const walletlink = new WalletLinkConnector({\r\n  url: REACT_APP_NETWORK_URL,\r\n  appName: 'Swap',\r\n  // appLogoUrl: '',\r\n});\r\n"],"mappings":";;AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,sBAAsB,QAAQ,qCAAqC;AAC5E,SAASC,mBAAmB,QAAQ,kCAAkC;AACtE;AACA;AACA,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,IAAMC,qBAAqB,GAAGC,OAAO,CAACC,GAAG,CAACF,qBAAqB;AAC/D;AACA;;AAEA,OAAO,IAAMG,gBAAwB,GAAGC,QAAQ,EAAAC,qBAAA,GAACJ,OAAO,CAACC,GAAG,CAACI,kBAAkB,cAAAD,qBAAA,cAAAA,qBAAA,GAAI,GAAG,CAAC;AAEvF,IAAI,OAAOL,qBAAqB,KAAK,WAAW,EAAE;EAChD,MAAM,IAAIO,KAAK,+DAA+D,CAAC;AACjF;AAEA,OAAO,IAAMC,OAAO,GAAG,IAAIT,gBAAgB,CAAC;EAC1CU,IAAI,EAAAC,eAAA,KAAKP,gBAAgB,EAAGH,qBAAqB;AACnD,CAAC,CAAC;AAEF,IAAIW,cAAwC;AAC5C,OAAO,SAASC,iBAAiBA,CAAA,EAAiB;EAAA,IAAAC,eAAA;EAChD,OAAQF,cAAc,IAAAE,eAAA,GAAGF,cAAc,cAAAE,eAAA,cAAAA,eAAA,GAAI,IAAIlB,YAAY,CAACa,OAAO,CAACM,QAAe,CAAC;AACtF;AAEA,OAAO,IAAMC,QAAQ,GAAG,IAAInB,iBAAiB,CAAC;EAC5CoB,iBAAiB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEb,gBAAgB;AAC5C,CAAC,CAAC;;AAEF;AACA,OAAO,IAAMc,aAAa,GAAG,IAAIpB,sBAAsB,CAAC;EACtDqB,GAAG,EAAE;IAAE,CAAC,EAAElB;EAAsB,CAAC;EACjCmB,MAAM,EAAE,kCAAkC;EAC1CC,MAAM,EAAE,IAAI;EACZC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,IAAMC,UAAU,GAAG,IAAIxB,mBAAmB,CAAC;EAChDyB,GAAG,EAAEvB,qBAAqB;EAC1BwB,OAAO,EAAE;EACT;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}