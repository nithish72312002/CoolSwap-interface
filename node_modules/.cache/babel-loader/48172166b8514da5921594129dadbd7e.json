{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _inherits = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _createSuper = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\nvar _wrapNativeSuper = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthereumProviderError = exports.EthereumRpcError = void 0;\nvar fast_safe_stringify_1 = require(\"fast-safe-stringify\");\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\nvar EthereumRpcError = /*#__PURE__*/function (_Error) {\n  _inherits(EthereumRpcError, _Error);\n  var _super = _createSuper(EthereumRpcError);\n  function EthereumRpcError(code, message, data) {\n    var _this;\n    _classCallCheck(this, EthereumRpcError);\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n    _this = _super.call(this, message);\n    _this.code = code;\n    if (data !== undefined) {\n      _this.data = data;\n    }\n    return _this;\n  }\n  /**\n   * Returns a plain object with all public class properties.\n   */\n  _createClass(EthereumRpcError, [{\n    key: \"serialize\",\n    value: function serialize() {\n      var serialized = {\n        code: this.code,\n        message: this.message\n      };\n      if (this.data !== undefined) {\n        serialized.data = this.data;\n      }\n      if (this.stack) {\n        serialized.stack = this.stack;\n      }\n      return serialized;\n    }\n    /**\n     * Return a string representation of the serialized error, omitting\n     * any circular references.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);\n    }\n  }]);\n  return EthereumRpcError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nexports.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nvar EthereumProviderError = /*#__PURE__*/function (_EthereumRpcError) {\n  _inherits(EthereumProviderError, _EthereumRpcError);\n  var _super2 = _createSuper(EthereumProviderError);\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  function EthereumProviderError(code, message, data) {\n    _classCallCheck(this, EthereumProviderError);\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n    return _super2.call(this, code, message, data);\n  }\n  return _createClass(EthereumProviderError);\n}(EthereumRpcError);\nexports.EthereumProviderError = EthereumProviderError;\n// Internal\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n  return value;\n}","map":{"version":3,"names":["fast_safe_stringify_1","require","EthereumRpcError","_Error","_inherits","_super","_createSuper","code","message","data","_this","_classCallCheck","Number","isInteger","Error","call","undefined","_createClass","key","value","serialize","serialized","stack","toString","default","stringifyReplacer","_wrapNativeSuper","exports","EthereumProviderError","_EthereumRpcError","_super2","isValidEthProviderCode","_"],"sources":["../src/classes.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AAAA,IAAAA,qBAAA,GAAAC,OAAA;AASA;;;;;AAAA,IAKaC,gBAAoB,0BAAAC,MAAA;EAAAC,SAAA,CAAAF,gBAAA,EAAAC,MAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,gBAAA;EAM/B,SAAAA,iBAAYK,IAAY,EAAEC,OAAe,EAAEC,IAAQ;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAT,gBAAA;IAEjD,IAAI,CAACU,MAAM,CAACC,SAAS,CAACN,IAAI,CAAC,EAAE;MAC3B,MAAM,IAAIO,KAAK,CACb,4BAA4B,CAC7B;;IAEH,IAAI,CAACN,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC3C,MAAM,IAAIM,KAAK,CACb,sCAAsC,CACvC;;IAGHJ,KAAA,GAAAL,MAAA,CAAAU,IAAA,OAAMP,OAAO;IACbE,KAAA,CAAKH,IAAI,GAAGA,IAAI;IAChB,IAAIE,IAAI,KAAKO,SAAS,EAAE;MACtBN,KAAA,CAAKD,IAAI,GAAGA,IAAI;;IACjB,OAAAC,KAAA;EACH;EAEA;;;EAAAO,YAAA,CAAAf,gBAAA;IAAAgB,GAAA;IAAAC,KAAA,EAGA,SAAAC,UAAA,EAAS;MACP,IAAMC,UAAU,GAA+B;QAC7Cd,IAAI,EAAE,IAAI,CAACA,IAAI;QACfC,OAAO,EAAE,IAAI,CAACA;OACf;MACD,IAAI,IAAI,CAACC,IAAI,KAAKO,SAAS,EAAE;QAC3BK,UAAU,CAACZ,IAAI,GAAG,IAAI,CAACA,IAAI;;MAE7B,IAAI,IAAI,CAACa,KAAK,EAAE;QACdD,UAAU,CAACC,KAAK,GAAG,IAAI,CAACA,KAAK;;MAE/B,OAAOD,UAAU;IACnB;IAEA;;;;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAIA,SAAAI,SAAA,EAAQ;MACN,OAAOvB,qBAAA,CAAAwB,OAAa,CAClB,IAAI,CAACJ,SAAS,EAAE,EAChBK,iBAAiB,EACjB,CAAC,CACF;IACH;EAAC;EAAA,OAAAvB,gBAAA;AAAA,gBAAAwB,gBAAA,CArDsCZ,KAAK;AAA9Ca,OAAA,CAAAzB,gBAAA,GAAAA,gBAAA;AAwDA;;;;AAAA,IAIa0B,qBAAyB,0BAAAC,iBAAA;EAAAzB,SAAA,CAAAwB,qBAAA,EAAAC,iBAAA;EAAA,IAAAC,OAAA,GAAAxB,YAAA,CAAAsB,qBAAA;EAEpC;;;;EAIA,SAAAA,sBAAYrB,IAAY,EAAEC,OAAe,EAAEC,IAAQ;IAAAE,eAAA,OAAAiB,qBAAA;IAEjD,IAAI,CAACG,sBAAsB,CAACxB,IAAI,CAAC,EAAE;MACjC,MAAM,IAAIO,KAAK,CACb,2DAA2D,CAC5D;;IACF,OAAAgB,OAAA,CAAAf,IAAA,OAEKR,IAAI,EAAEC,OAAO,EAAEC,IAAI;EAC3B;EAAC,OAAAQ,YAAA,CAAAW,qBAAA;AAAA,EAf2C1B,gBAAmB;AAAjEyB,OAAA,CAAAC,qBAAA,GAAAA,qBAAA;AAkBA;AAEA,SAASG,sBAAsBA,CAACxB,IAAY;EAC1C,OAAOK,MAAM,CAACC,SAAS,CAACN,IAAI,CAAC,IAAIA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI;AAC/D;AAEA,SAASkB,iBAAiBA,CAACO,CAAU,EAAEb,KAAc;EACnD,IAAIA,KAAK,KAAK,YAAY,EAAE;IAC1B,OAAOH,SAAS;;EAElB,OAAOG,KAAK;AACd"},"metadata":{},"sourceType":"script"}