{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _digest = require('./digest.js');\nvar from = function from(_ref) {\n  var name = _ref.name,\n    code = _ref.code,\n    encode = _ref.encode;\n  return new Hasher(name, code, encode);\n};\nvar Hasher = /*#__PURE__*/function () {\n  function Hasher(name, code, encode) {\n    _classCallCheck(this, Hasher);\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  _createClass(Hasher, [{\n    key: \"digest\",\n    value: function digest(input) {\n      var _this = this;\n      if (input instanceof Uint8Array) {\n        var result = this.encode(input);\n        return result instanceof Uint8Array ? _digest.create(this.code, result) : result.then(function (digest$1) {\n          return _digest.create(_this.code, digest$1);\n        });\n      } else {\n        throw Error('Unknown type, must be binary type');\n      }\n    }\n  }]);\n  return Hasher;\n}();\nexports.Hasher = Hasher;\nexports.from = from;","map":{"version":3,"names":["_classCallCheck","require","_createClass","Object","defineProperty","exports","value","digest","from","_ref","name","code","encode","Hasher","key","input","_this","Uint8Array","result","create","then","digest$1","Error"],"sources":["E:/testprojects/CoolSwap-interface/node_modules/multiformats/cjs/src/hashes/hasher.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar digest = require('./digest.js');\n\nconst from = ({name, code, encode}) => new Hasher(name, code, encode);\nclass Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? digest.create(this.code, result) : result.then(digest$1 => digest.create(this.code, digest$1));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\n\nexports.Hasher = Hasher;\nexports.from = from;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAD,OAAA;AAEbE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,IAAIC,OAAM,GAAGN,OAAO,CAAC,aAAa,CAAC;AAEnC,IAAMO,IAAI,GAAG,SAAPA,IAAIA,CAAAC,IAAA;EAAA,IAAKC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,MAAM,GAAAH,IAAA,CAANG,MAAM;EAAA,OAAM,IAAIC,MAAM,CAACH,IAAI,EAAEC,IAAI,EAAEC,MAAM,CAAC;AAAA;AAAC,IAChEC,MAAM;EACV,SAAAA,OAAYH,IAAI,EAAEC,IAAI,EAAEC,MAAM,EAAE;IAAAZ,eAAA,OAAAa,MAAA;IAC9B,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAACV,YAAA,CAAAW,MAAA;IAAAC,GAAA;IAAAR,KAAA,EACD,SAAAC,OAAOQ,KAAK,EAAE;MAAA,IAAAC,KAAA;MACZ,IAAID,KAAK,YAAYE,UAAU,EAAE;QAC/B,IAAMC,MAAM,GAAG,IAAI,CAACN,MAAM,CAACG,KAAK,CAAC;QACjC,OAAOG,MAAM,YAAYD,UAAU,GAAGV,OAAM,CAACY,MAAM,CAAC,IAAI,CAACR,IAAI,EAAEO,MAAM,CAAC,GAAGA,MAAM,CAACE,IAAI,CAAC,UAAAC,QAAQ;UAAA,OAAId,OAAM,CAACY,MAAM,CAACH,KAAI,CAACL,IAAI,EAAEU,QAAQ,CAAC;QAAA,EAAC;MACtI,CAAC,MAAM;QACL,MAAMC,KAAK,CAAC,mCAAmC,CAAC;MAClD;IACF;EAAC;EAAA,OAAAT,MAAA;AAAA;AAGHR,OAAO,CAACQ,MAAM,GAAGA,MAAM;AACvBR,OAAO,CAACG,IAAI,GAAGA,IAAI"},"metadata":{},"sourceType":"script"}