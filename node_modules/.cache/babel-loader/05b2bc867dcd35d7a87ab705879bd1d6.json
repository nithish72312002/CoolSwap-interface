{"ast":null,"code":"import _slicedToArray from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nimport { useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useMulticallContract } from '../../hooks/useContract';\nimport useDebounce from '../../hooks/useDebounce';\nimport chunkArray from '../../utils/chunkArray';\nimport { CancelledError, retry, RetryableError } from '../../utils/retry';\nimport { useBlockNumber } from '../application/hooks';\nimport { errorFetchingMulticallResults, fetchingMulticallResults, parseCallKey, updateMulticallResults } from './actions';\n\n// chunk calls so we do not exceed the gas limit\nvar CALL_CHUNK_SIZE = 500;\n\n/**\r\n * Fetches a chunk of calls, enforcing a minimum block number constraint\r\n * @param multicallContract multicall contract to fetch against\r\n * @param chunk chunk of calls to make\r\n * @param minBlockNumber minimum block number of the result set\r\n */\nfunction fetchChunk(_x, _x2, _x3) {\n  return _fetchChunk.apply(this, arguments);\n}\n/**\r\n * From the current all listeners state, return each call key mapped to the\r\n * minimum number of blocks per fetch. This is how often each key must be fetched.\r\n * @param allListeners the all listeners state\r\n * @param chainId the current chain id\r\n */\nfunction _fetchChunk() {\n  _fetchChunk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(multicallContract, chunk, minBlockNumber) {\n    var resultsBlockNumber, returnData, _yield$multicallContr, _yield$multicallContr2;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber);\n          _context.prev = 1;\n          _context.next = 4;\n          return multicallContract.aggregate(chunk.map(function (obj) {\n            return [obj.address, obj.callData];\n          }));\n        case 4:\n          _yield$multicallContr = _context.sent;\n          _yield$multicallContr2 = _slicedToArray(_yield$multicallContr, 2);\n          resultsBlockNumber = _yield$multicallContr2[0];\n          returnData = _yield$multicallContr2[1];\n          _context.next = 14;\n          break;\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          console.debug('Failed to fetch chunk inside retry', _context.t0);\n          throw _context.t0;\n        case 14:\n          if (!(resultsBlockNumber.toNumber() < minBlockNumber)) {\n            _context.next = 17;\n            break;\n          }\n          console.debug(\"Fetched results for old block number: \".concat(resultsBlockNumber.toString(), \" vs. \").concat(minBlockNumber));\n          throw new RetryableError('Fetched for old block number');\n        case 17:\n          return _context.abrupt(\"return\", {\n            results: returnData,\n            blockNumber: resultsBlockNumber.toNumber()\n          });\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[1, 10]]);\n  }));\n  return _fetchChunk.apply(this, arguments);\n}\nexport function activeListeningKeys(allListeners, chainId) {\n  if (!allListeners || !chainId) return {};\n  var listeners = allListeners[chainId];\n  if (!listeners) return {};\n  return Object.keys(listeners).reduce(function (memo, callKey) {\n    var keyListeners = listeners[callKey];\n    memo[callKey] = Object.keys(keyListeners).filter(function (key) {\n      var blocksPerFetch = parseInt(key);\n      if (blocksPerFetch <= 0) return false;\n      return keyListeners[blocksPerFetch] > 0;\n    }).reduce(function (previousMin, current) {\n      return Math.min(previousMin, parseInt(current));\n    }, Infinity);\n    return memo;\n  }, {});\n}\n\n/**\r\n * Return the keys that need to be refetched\r\n * @param callResults current call result state\r\n * @param listeningKeys each call key mapped to how old the data can be in blocks\r\n * @param chainId the current chain id\r\n * @param latestBlockNumber the latest block number\r\n */\nexport function outdatedListeningKeys(callResults, listeningKeys, chainId, latestBlockNumber) {\n  if (!chainId || !latestBlockNumber) return [];\n  var results = callResults[chainId];\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys);\n  return Object.keys(listeningKeys).filter(function (callKey) {\n    var blocksPerFetch = listeningKeys[callKey];\n    var data = callResults[chainId][callKey];\n    // no data, must fetch\n    if (!data) return true;\n    var minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1);\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false;\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber;\n  });\n}\nexport default function Updater() {\n  var dispatch = useDispatch();\n  var state = useSelector(function (state) {\n    return state.multicall;\n  });\n  // wait for listeners to settle before triggering updates\n  var debouncedListeners = useDebounce(state.callListeners, 100);\n  var latestBlockNumber = useBlockNumber();\n  var _useActiveWeb3React = useActiveWeb3React(),\n    chainId = _useActiveWeb3React.chainId;\n  var multicallContract = useMulticallContract();\n  var cancellations = useRef();\n  var listeningKeys = useMemo(function () {\n    return activeListeningKeys(debouncedListeners, chainId);\n  }, [debouncedListeners, chainId]);\n  var unserializedOutdatedCallKeys = useMemo(function () {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber);\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber]);\n  var serializedOutdatedCallKeys = useMemo(function () {\n    return JSON.stringify(unserializedOutdatedCallKeys.sort());\n  }, [unserializedOutdatedCallKeys]);\n  useEffect(function () {\n    var _cancellations$curren;\n    if (!latestBlockNumber || !chainId || !multicallContract) return;\n    var outdatedCallKeys = JSON.parse(serializedOutdatedCallKeys);\n    if (outdatedCallKeys.length === 0) return;\n    var calls = outdatedCallKeys.map(function (key) {\n      return parseCallKey(key);\n    });\n    var chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE);\n    if (((_cancellations$curren = cancellations.current) === null || _cancellations$curren === void 0 ? void 0 : _cancellations$curren.blockNumber) !== latestBlockNumber) {\n      var _cancellations$curren2, _cancellations$curren3;\n      (_cancellations$curren2 = cancellations.current) === null || _cancellations$curren2 === void 0 ? void 0 : (_cancellations$curren3 = _cancellations$curren2.cancellations) === null || _cancellations$curren3 === void 0 ? void 0 : _cancellations$curren3.forEach(function (c) {\n        return c();\n      });\n    }\n    dispatch(fetchingMulticallResults({\n      calls: calls,\n      chainId: chainId,\n      fetchingBlockNumber: latestBlockNumber\n    }));\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: chunkedCalls.map(function (chunk, index) {\n        var _retry = retry(function () {\n            return fetchChunk(multicallContract, chunk, latestBlockNumber);\n          }, {\n            n: Infinity,\n            minWait: 2500,\n            maxWait: 3500\n          }),\n          cancel = _retry.cancel,\n          promise = _retry.promise;\n        promise.then(function (_ref) {\n          var returnData = _ref.results,\n            fetchBlockNumber = _ref.blockNumber;\n          cancellations.current = {\n            cancellations: [],\n            blockNumber: latestBlockNumber\n          };\n\n          // accumulates the length of all previous indices\n          var firstCallKeyIndex = chunkedCalls.slice(0, index).reduce(function (memo, curr) {\n            return memo + curr.length;\n          }, 0);\n          var lastCallKeyIndex = firstCallKeyIndex + returnData.length;\n          dispatch(updateMulticallResults({\n            chainId: chainId,\n            results: outdatedCallKeys.slice(firstCallKeyIndex, lastCallKeyIndex).reduce(function (memo, callKey, i) {\n              var _returnData$i;\n              memo[callKey] = (_returnData$i = returnData[i]) !== null && _returnData$i !== void 0 ? _returnData$i : null;\n              return memo;\n            }, {}),\n            blockNumber: fetchBlockNumber\n          }));\n        }).catch(function (error) {\n          if (error instanceof CancelledError) {\n            console.debug('Cancelled fetch for blockNumber', latestBlockNumber);\n            return;\n          }\n          console.error('Failed to fetch multicall chunk', chunk, chainId, error);\n          dispatch(errorFetchingMulticallResults({\n            calls: chunk,\n            chainId: chainId,\n            fetchingBlockNumber: latestBlockNumber\n          }));\n        });\n        return cancel;\n      })\n    };\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, latestBlockNumber]);\n  return null;\n}","map":{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","useEffect","useMemo","useRef","useDispatch","useSelector","useActiveWeb3React","useMulticallContract","useDebounce","chunkArray","CancelledError","retry","RetryableError","useBlockNumber","errorFetchingMulticallResults","fetchingMulticallResults","parseCallKey","updateMulticallResults","CALL_CHUNK_SIZE","fetchChunk","_x","_x2","_x3","_fetchChunk","apply","arguments","_asyncToGenerator","_callee","multicallContract","chunk","minBlockNumber","resultsBlockNumber","returnData","_yield$multicallContr","_yield$multicallContr2","_callee$","_context","console","debug","aggregate","map","obj","address","callData","_slicedToArray","t0","toNumber","concat","toString","results","blockNumber","activeListeningKeys","allListeners","chainId","listeners","reduce","memo","callKey","keyListeners","filter","key","blocksPerFetch","parseInt","previousMin","current","Math","min","Infinity","outdatedListeningKeys","callResults","listeningKeys","latestBlockNumber","data","minDataBlockNumber","fetchingBlockNumber","Updater","dispatch","state","multicall","debouncedListeners","callListeners","_useActiveWeb3React","cancellations","unserializedOutdatedCallKeys","serializedOutdatedCallKeys","JSON","stringify","sort","_cancellations$curren","outdatedCallKeys","parse","calls","chunkedCalls","_cancellations$curren2","_cancellations$curren3","index","_retry","minWait","maxWait","cancel","promise","_ref","fetchBlockNumber","firstCallKeyIndex","curr","lastCallKeyIndex","_returnData$i","error"],"sources":["E:/testprojects/CoolSwap-interface/src/state/multicall/updater.tsx"],"sourcesContent":["import { Contract } from '@ethersproject/contracts';\r\nimport { useEffect, useMemo, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useActiveWeb3React } from '../../hooks';\r\nimport { useMulticallContract } from '../../hooks/useContract';\r\nimport useDebounce from '../../hooks/useDebounce';\r\nimport chunkArray from '../../utils/chunkArray';\r\nimport { CancelledError, retry, RetryableError } from '../../utils/retry';\r\nimport { useBlockNumber } from '../application/hooks';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport {\r\n  Call,\r\n  errorFetchingMulticallResults,\r\n  fetchingMulticallResults,\r\n  parseCallKey,\r\n  updateMulticallResults,\r\n} from './actions';\r\n\r\n// chunk calls so we do not exceed the gas limit\r\nconst CALL_CHUNK_SIZE = 500;\r\n\r\n/**\r\n * Fetches a chunk of calls, enforcing a minimum block number constraint\r\n * @param multicallContract multicall contract to fetch against\r\n * @param chunk chunk of calls to make\r\n * @param minBlockNumber minimum block number of the result set\r\n */\r\nasync function fetchChunk(\r\n  multicallContract: Contract,\r\n  chunk: Call[],\r\n  minBlockNumber: number\r\n): Promise<{ results: string[]; blockNumber: number }> {\r\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber);\r\n  let resultsBlockNumber, returnData;\r\n  try {\r\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(\r\n      chunk.map((obj) => [obj.address, obj.callData])\r\n    );\r\n  } catch (error) {\r\n    console.debug('Failed to fetch chunk inside retry', error);\r\n    throw error;\r\n  }\r\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\r\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`);\r\n    throw new RetryableError('Fetched for old block number');\r\n  }\r\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() };\r\n}\r\n\r\n/**\r\n * From the current all listeners state, return each call key mapped to the\r\n * minimum number of blocks per fetch. This is how often each key must be fetched.\r\n * @param allListeners the all listeners state\r\n * @param chainId the current chain id\r\n */\r\nexport function activeListeningKeys(\r\n  allListeners: AppState['multicall']['callListeners'],\r\n  chainId?: number\r\n): { [callKey: string]: number } {\r\n  if (!allListeners || !chainId) return {};\r\n  const listeners = allListeners[chainId];\r\n  if (!listeners) return {};\r\n\r\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\r\n    const keyListeners = listeners[callKey];\r\n\r\n    memo[callKey] = Object.keys(keyListeners)\r\n      .filter((key) => {\r\n        const blocksPerFetch = parseInt(key);\r\n        if (blocksPerFetch <= 0) return false;\r\n        return keyListeners[blocksPerFetch] > 0;\r\n      })\r\n      .reduce((previousMin, current) => {\r\n        return Math.min(previousMin, parseInt(current));\r\n      }, Infinity);\r\n    return memo;\r\n  }, {});\r\n}\r\n\r\n/**\r\n * Return the keys that need to be refetched\r\n * @param callResults current call result state\r\n * @param listeningKeys each call key mapped to how old the data can be in blocks\r\n * @param chainId the current chain id\r\n * @param latestBlockNumber the latest block number\r\n */\r\nexport function outdatedListeningKeys(\r\n  callResults: AppState['multicall']['callResults'],\r\n  listeningKeys: { [callKey: string]: number },\r\n  chainId: number | undefined,\r\n  latestBlockNumber: number | undefined\r\n): string[] {\r\n  if (!chainId || !latestBlockNumber) return [];\r\n  const results = callResults[chainId];\r\n  // no results at all, load everything\r\n  if (!results) return Object.keys(listeningKeys);\r\n\r\n  return Object.keys(listeningKeys).filter((callKey) => {\r\n    const blocksPerFetch = listeningKeys[callKey];\r\n\r\n    const data = callResults[chainId][callKey];\r\n    // no data, must fetch\r\n    if (!data) return true;\r\n\r\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1);\r\n\r\n    // already fetching it for a recent enough block, don't refetch it\r\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false;\r\n\r\n    // if data is older than minDataBlockNumber, fetch it\r\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber;\r\n  });\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const state = useSelector<AppState, AppState['multicall']>((state) => state.multicall);\r\n  // wait for listeners to settle before triggering updates\r\n  const debouncedListeners = useDebounce(state.callListeners, 100);\r\n  const latestBlockNumber = useBlockNumber();\r\n  const { chainId } = useActiveWeb3React();\r\n  const multicallContract = useMulticallContract();\r\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>();\r\n\r\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\r\n    return activeListeningKeys(debouncedListeners, chainId);\r\n  }, [debouncedListeners, chainId]);\r\n\r\n  const unserializedOutdatedCallKeys = useMemo(() => {\r\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber);\r\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber]);\r\n\r\n  const serializedOutdatedCallKeys = useMemo(\r\n    () => JSON.stringify(unserializedOutdatedCallKeys.sort()),\r\n    [unserializedOutdatedCallKeys]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!latestBlockNumber || !chainId || !multicallContract) return;\r\n\r\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys);\r\n    if (outdatedCallKeys.length === 0) return;\r\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key));\r\n\r\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE);\r\n\r\n    if (cancellations.current?.blockNumber !== latestBlockNumber) {\r\n      cancellations.current?.cancellations?.forEach((c) => c());\r\n    }\r\n\r\n    dispatch(\r\n      fetchingMulticallResults({\r\n        calls,\r\n        chainId,\r\n        fetchingBlockNumber: latestBlockNumber,\r\n      })\r\n    );\r\n\r\n    cancellations.current = {\r\n      blockNumber: latestBlockNumber,\r\n      cancellations: chunkedCalls.map((chunk, index) => {\r\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, latestBlockNumber), {\r\n          n: Infinity,\r\n          minWait: 2500,\r\n          maxWait: 3500,\r\n        });\r\n        promise\r\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\r\n            cancellations.current = { cancellations: [], blockNumber: latestBlockNumber };\r\n\r\n            // accumulates the length of all previous indices\r\n            const firstCallKeyIndex = chunkedCalls\r\n              .slice(0, index)\r\n              .reduce<number>((memo, curr) => memo + curr.length, 0);\r\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length;\r\n\r\n            dispatch(\r\n              updateMulticallResults({\r\n                chainId,\r\n                results: outdatedCallKeys\r\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\r\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\r\n                    memo[callKey] = returnData[i] ?? null;\r\n                    return memo;\r\n                  }, {}),\r\n                blockNumber: fetchBlockNumber,\r\n              })\r\n            );\r\n          })\r\n          .catch((error: any) => {\r\n            if (error instanceof CancelledError) {\r\n              console.debug('Cancelled fetch for blockNumber', latestBlockNumber);\r\n              return;\r\n            }\r\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error);\r\n            dispatch(\r\n              errorFetchingMulticallResults({\r\n                calls: chunk,\r\n                chainId,\r\n                fetchingBlockNumber: latestBlockNumber,\r\n              })\r\n            );\r\n          });\r\n        return cancel;\r\n      }),\r\n    };\r\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, latestBlockNumber]);\r\n\r\n  return null;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}