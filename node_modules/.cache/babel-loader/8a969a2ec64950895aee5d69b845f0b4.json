{"ast":null,"code":"import { namehash } from 'ethers/lib/utils';\nimport { useMemo } from 'react';\nimport { useSingleCallResult } from '../state/multicall/hooks';\nimport { isAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract';\nimport useDebounce from './useDebounce';\n\n/**\r\n * Does a reverse lookup for an address to find its ENS name.\r\n * Note this is not the same as looking up an ENS name to find an address.\r\n */\nexport default function useENSName(address) {\n  var _resolverAddress$resu, _name$result$, _name$result;\n  var debouncedAddress = useDebounce(address, 200);\n  var ensNodeArgument = useMemo(function () {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined];\n    try {\n      return debouncedAddress ? [namehash(\"\".concat(debouncedAddress.toLowerCase().substr(2), \".addr.reverse\"))] : [undefined];\n    } catch (error) {\n      return [undefined];\n    }\n  }, [debouncedAddress]);\n  var registrarContract = useENSRegistrarContract(false);\n  var resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\n  var resolverAddressResult = (_resolverAddress$resu = resolverAddress.result) === null || _resolverAddress$resu === void 0 ? void 0 : _resolverAddress$resu[0];\n  var resolverContract = useENSResolverContract(resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined, false);\n  var name = useSingleCallResult(resolverContract, 'name', ensNodeArgument);\n  var changed = debouncedAddress !== address;\n  return {\n    ENSName: changed ? null : (_name$result$ = (_name$result = name.result) === null || _name$result === void 0 ? void 0 : _name$result[0]) !== null && _name$result$ !== void 0 ? _name$result$ : null,\n    loading: changed || resolverAddress.loading || name.loading\n  };\n}","map":{"version":3,"names":["namehash","useMemo","useSingleCallResult","isAddress","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useENSName","address","_resolverAddress$resu","_name$result$","_name$result","debouncedAddress","ensNodeArgument","undefined","concat","toLowerCase","substr","error","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","name","changed","ENSName","loading"],"sources":["E:/testprojects/CoolSwap-interface/src/hooks/useENSName.ts"],"sourcesContent":["import { namehash } from 'ethers/lib/utils';\r\nimport { useMemo } from 'react';\r\nimport { useSingleCallResult } from '../state/multicall/hooks';\r\nimport { isAddress } from '../utils';\r\nimport isZero from '../utils/isZero';\r\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract';\r\nimport useDebounce from './useDebounce';\r\n\r\n/**\r\n * Does a reverse lookup for an address to find its ENS name.\r\n * Note this is not the same as looking up an ENS name to find an address.\r\n */\r\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\r\n  const debouncedAddress = useDebounce(address, 200);\r\n  const ensNodeArgument = useMemo(() => {\r\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined];\r\n    try {\r\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined];\r\n    } catch (error) {\r\n      return [undefined];\r\n    }\r\n  }, [debouncedAddress]);\r\n  const registrarContract = useENSRegistrarContract(false);\r\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\r\n  const resolverAddressResult = resolverAddress.result?.[0];\r\n  const resolverContract = useENSResolverContract(\r\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\r\n    false\r\n  );\r\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument);\r\n\r\n  const changed = debouncedAddress !== address;\r\n  return {\r\n    ENSName: changed ? null : name.result?.[0] ?? null,\r\n    loading: changed || resolverAddress.loading || name.loading,\r\n  };\r\n}\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,SAAS,QAAQ,UAAU;AACpC,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,uBAAuB,EAAEC,sBAAsB,QAAQ,eAAe;AAC/E,OAAOC,WAAW,MAAM,eAAe;;AAEvC;AACA;AACA;AACA;AACA,eAAe,SAASC,UAAUA,CAACC,OAAgB,EAAgD;EAAA,IAAAC,qBAAA,EAAAC,aAAA,EAAAC,YAAA;EACjG,IAAMC,gBAAgB,GAAGN,WAAW,CAACE,OAAO,EAAE,GAAG,CAAC;EAClD,IAAMK,eAAe,GAAGb,OAAO,CAAC,YAAM;IACpC,IAAI,CAACY,gBAAgB,IAAI,CAACV,SAAS,CAACU,gBAAgB,CAAC,EAAE,OAAO,CAACE,SAAS,CAAC;IACzE,IAAI;MACF,OAAOF,gBAAgB,GAAG,CAACb,QAAQ,IAAAgB,MAAA,CAAIH,gBAAgB,CAACI,WAAW,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,kBAAe,CAAC,CAAC,GAAG,CAACH,SAAS,CAAC;IAChH,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO,CAACJ,SAAS,CAAC;IACpB;EACF,CAAC,EAAE,CAACF,gBAAgB,CAAC,CAAC;EACtB,IAAMO,iBAAiB,GAAGf,uBAAuB,CAAC,KAAK,CAAC;EACxD,IAAMgB,eAAe,GAAGnB,mBAAmB,CAACkB,iBAAiB,EAAE,UAAU,EAAEN,eAAe,CAAC;EAC3F,IAAMQ,qBAAqB,IAAAZ,qBAAA,GAAGW,eAAe,CAACE,MAAM,cAAAb,qBAAA,uBAAtBA,qBAAA,CAAyB,CAAC,CAAC;EACzD,IAAMc,gBAAgB,GAAGlB,sBAAsB,CAC7CgB,qBAAqB,IAAI,CAAClB,MAAM,CAACkB,qBAAqB,CAAC,GAAGA,qBAAqB,GAAGP,SAAS,EAC3F,KACF,CAAC;EACD,IAAMU,IAAI,GAAGvB,mBAAmB,CAACsB,gBAAgB,EAAE,MAAM,EAAEV,eAAe,CAAC;EAE3E,IAAMY,OAAO,GAAGb,gBAAgB,KAAKJ,OAAO;EAC5C,OAAO;IACLkB,OAAO,EAAED,OAAO,GAAG,IAAI,IAAAf,aAAA,IAAAC,YAAA,GAAGa,IAAI,CAACF,MAAM,cAAAX,YAAA,uBAAXA,YAAA,CAAc,CAAC,CAAC,cAAAD,aAAA,cAAAA,aAAA,GAAI,IAAI;IAClDiB,OAAO,EAAEF,OAAO,IAAIL,eAAe,CAACO,OAAO,IAAIH,IAAI,CAACG;EACtD,CAAC;AACH"},"metadata":{},"sourceType":"module"}