{"ast":null,"code":"import _slicedToArray from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _templateObject,\n  _templateObject2,\n  _jsxFileName = \"E:\\\\testprojects\\\\CoolSwap-interface\\\\src\\\\components\\\\Web3ReactManager\\\\index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { network } from '../../connectors';\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\nimport { NetworkContextName } from '../../constants';\nimport Loader from '../Loader';\nvar MessageWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  height: 20rem;\\n\"])));\nvar Message = styled.h2(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  color: \", \";\\n\"])), function (_ref) {\n  var theme = _ref.theme;\n  return theme.secondary1;\n});\nexport default function Web3ReactManager(_ref2) {\n  var children = _ref2.children;\n  var _useTranslation = useTranslation(),\n    t = _useTranslation.t;\n  var _useWeb3React = useWeb3React(),\n    active = _useWeb3React.active;\n  var _useWeb3React2 = useWeb3React(NetworkContextName),\n    networkActive = _useWeb3React2.active,\n    networkError = _useWeb3React2.error,\n    activateNetwork = _useWeb3React2.activate;\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  var triedEager = useEagerConnect();\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(function () {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]);\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager);\n\n  // handle delayed loader state\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showLoader = _useState2[0],\n    setShowLoader = _useState2[1];\n  useEffect(function () {\n    var timeout = setTimeout(function () {\n      setShowLoader(true);\n    }, 600);\n    return function () {\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null;\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return /*#__PURE__*/React.createElement(MessageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, t('unknownError')));\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? /*#__PURE__*/React.createElement(MessageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    })) : null;\n  }\n  return children;\n}","map":{"version":3,"names":["React","useState","useEffect","useWeb3React","styled","useTranslation","network","useEagerConnect","useInactiveListener","NetworkContextName","Loader","MessageWrapper","div","_templateObject","_taggedTemplateLiteral","Message","h2","_templateObject2","_ref","theme","secondary1","Web3ReactManager","_ref2","children","_useTranslation","t","_useWeb3React","active","_useWeb3React2","networkActive","networkError","error","activateNetwork","activate","triedEager","_useState","_useState2","_slicedToArray","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["E:/testprojects/CoolSwap-interface/src/components/Web3ReactManager/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useWeb3React } from '@web3-react/core';\r\nimport styled from 'styled-components';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { network } from '../../connectors';\r\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\r\nimport { NetworkContextName } from '../../constants';\r\nimport Loader from '../Loader';\r\n\r\nconst MessageWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 20rem;\r\n`;\r\n\r\nconst Message = styled.h2`\r\n  color: ${({ theme }) => theme.secondary1};\r\n`;\r\n\r\nexport default function Web3ReactManager({ children }: { children: JSX.Element }) {\r\n  const { t } = useTranslation();\r\n  const { active } = useWeb3React();\r\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName);\r\n\r\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\r\n  const triedEager = useEagerConnect();\r\n\r\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\r\n  useEffect(() => {\r\n    if (triedEager && !networkActive && !networkError && !active) {\r\n      activateNetwork(network);\r\n    }\r\n  }, [triedEager, networkActive, networkError, activateNetwork, active]);\r\n\r\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\r\n  useInactiveListener(!triedEager);\r\n\r\n  // handle delayed loader state\r\n  const [showLoader, setShowLoader] = useState(false);\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setShowLoader(true);\r\n    }, 600);\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, []);\r\n\r\n  // on page load, do nothing until we've tried to connect to the injected connector\r\n  if (!triedEager) {\r\n    return null;\r\n  }\r\n\r\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\r\n  if (!active && networkError) {\r\n    return (\r\n      <MessageWrapper>\r\n        <Message>{t('unknownError')}</Message>\r\n      </MessageWrapper>\r\n    );\r\n  }\r\n\r\n  // if neither context is active, spin\r\n  if (!active && !networkActive) {\r\n    return showLoader ? (\r\n      <MessageWrapper>\r\n        <Loader />\r\n      </MessageWrapper>\r\n    ) : null;\r\n  }\r\n\r\n  return children;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}