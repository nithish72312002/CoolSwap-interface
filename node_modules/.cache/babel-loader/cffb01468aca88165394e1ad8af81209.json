{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { addMulticallListeners, errorFetchingMulticallResults, fetchingMulticallResults, removeMulticallListeners, toCallKey, updateMulticallResults } from './actions';\nvar initialState = {\n  callResults: {}\n};\nexport default createReducer(initialState, function (builder) {\n  return builder.addCase(addMulticallListeners, function (state, _ref) {\n    var _listeners$chainId;\n    var _ref$payload = _ref.payload,\n      calls = _ref$payload.calls,\n      chainId = _ref$payload.chainId,\n      _ref$payload$options = _ref$payload.options,\n      _ref$payload$options2 = _ref$payload$options === void 0 ? {} : _ref$payload$options,\n      _ref$payload$options3 = _ref$payload$options2.blocksPerFetch,\n      blocksPerFetch = _ref$payload$options3 === void 0 ? 1 : _ref$payload$options3;\n    var listeners = state.callListeners ? state.callListeners : state.callListeners = {};\n    listeners[chainId] = (_listeners$chainId = listeners[chainId]) !== null && _listeners$chainId !== void 0 ? _listeners$chainId : {};\n    calls.forEach(function (call) {\n      var _listeners$chainId$ca, _listeners$chainId$ca2;\n      var callKey = toCallKey(call);\n      listeners[chainId][callKey] = (_listeners$chainId$ca = listeners[chainId][callKey]) !== null && _listeners$chainId$ca !== void 0 ? _listeners$chainId$ca : {};\n      listeners[chainId][callKey][blocksPerFetch] = ((_listeners$chainId$ca2 = listeners[chainId][callKey][blocksPerFetch]) !== null && _listeners$chainId$ca2 !== void 0 ? _listeners$chainId$ca2 : 0) + 1;\n    });\n  }).addCase(removeMulticallListeners, function (state, _ref2) {\n    var _ref2$payload = _ref2.payload,\n      chainId = _ref2$payload.chainId,\n      calls = _ref2$payload.calls,\n      _ref2$payload$options = _ref2$payload.options,\n      _ref2$payload$options2 = _ref2$payload$options === void 0 ? {} : _ref2$payload$options,\n      _ref2$payload$options3 = _ref2$payload$options2.blocksPerFetch,\n      blocksPerFetch = _ref2$payload$options3 === void 0 ? 1 : _ref2$payload$options3;\n    var listeners = state.callListeners ? state.callListeners : state.callListeners = {};\n    if (!listeners[chainId]) return;\n    calls.forEach(function (call) {\n      var callKey = toCallKey(call);\n      if (!listeners[chainId][callKey]) return;\n      if (!listeners[chainId][callKey][blocksPerFetch]) return;\n      if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n        delete listeners[chainId][callKey][blocksPerFetch];\n      } else {\n        listeners[chainId][callKey][blocksPerFetch]--;\n      }\n    });\n  }).addCase(fetchingMulticallResults, function (state, _ref3) {\n    var _state$callResults$ch;\n    var _ref3$payload = _ref3.payload,\n      chainId = _ref3$payload.chainId,\n      fetchingBlockNumber = _ref3$payload.fetchingBlockNumber,\n      calls = _ref3$payload.calls;\n    state.callResults[chainId] = (_state$callResults$ch = state.callResults[chainId]) !== null && _state$callResults$ch !== void 0 ? _state$callResults$ch : {};\n    calls.forEach(function (call) {\n      var callKey = toCallKey(call);\n      var current = state.callResults[chainId][callKey];\n      if (!current) {\n        state.callResults[chainId][callKey] = {\n          fetchingBlockNumber: fetchingBlockNumber\n        };\n      } else {\n        var _current$fetchingBloc;\n        if (((_current$fetchingBloc = current.fetchingBlockNumber) !== null && _current$fetchingBloc !== void 0 ? _current$fetchingBloc : 0) >= fetchingBlockNumber) return;\n        state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber;\n      }\n    });\n  }).addCase(errorFetchingMulticallResults, function (state, _ref4) {\n    var _state$callResults$ch2;\n    var _ref4$payload = _ref4.payload,\n      fetchingBlockNumber = _ref4$payload.fetchingBlockNumber,\n      chainId = _ref4$payload.chainId,\n      calls = _ref4$payload.calls;\n    state.callResults[chainId] = (_state$callResults$ch2 = state.callResults[chainId]) !== null && _state$callResults$ch2 !== void 0 ? _state$callResults$ch2 : {};\n    calls.forEach(function (call) {\n      var callKey = toCallKey(call);\n      var current = state.callResults[chainId][callKey];\n      if (!current) return; // only should be dispatched if we are already fetching\n      if (current.fetchingBlockNumber === fetchingBlockNumber) {\n        delete current.fetchingBlockNumber;\n        current.data = null;\n        current.blockNumber = fetchingBlockNumber;\n      }\n    });\n  }).addCase(updateMulticallResults, function (state, _ref5) {\n    var _state$callResults$ch3;\n    var _ref5$payload = _ref5.payload,\n      chainId = _ref5$payload.chainId,\n      results = _ref5$payload.results,\n      blockNumber = _ref5$payload.blockNumber;\n    state.callResults[chainId] = (_state$callResults$ch3 = state.callResults[chainId]) !== null && _state$callResults$ch3 !== void 0 ? _state$callResults$ch3 : {};\n    Object.keys(results).forEach(function (callKey) {\n      var _current$blockNumber;\n      var current = state.callResults[chainId][callKey];\n      if (((_current$blockNumber = current === null || current === void 0 ? void 0 : current.blockNumber) !== null && _current$blockNumber !== void 0 ? _current$blockNumber : 0) > blockNumber) return;\n      state.callResults[chainId][callKey] = {\n        data: results[callKey],\n        blockNumber: blockNumber\n      };\n    });\n  });\n});","map":{"version":3,"names":["createReducer","addMulticallListeners","errorFetchingMulticallResults","fetchingMulticallResults","removeMulticallListeners","toCallKey","updateMulticallResults","initialState","callResults","builder","addCase","state","_ref","_listeners$chainId","_ref$payload","payload","calls","chainId","_ref$payload$options","options","_ref$payload$options2","_ref$payload$options3","blocksPerFetch","listeners","callListeners","forEach","call","_listeners$chainId$ca","_listeners$chainId$ca2","callKey","_ref2","_ref2$payload","_ref2$payload$options","_ref2$payload$options2","_ref2$payload$options3","_ref3","_state$callResults$ch","_ref3$payload","fetchingBlockNumber","current","_current$fetchingBloc","_ref4","_state$callResults$ch2","_ref4$payload","data","blockNumber","_ref5","_state$callResults$ch3","_ref5$payload","results","Object","keys","_current$blockNumber"],"sources":["E:/testprojects/CoolSwap-interface/src/state/multicall/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addMulticallListeners,\r\n  errorFetchingMulticallResults,\r\n  fetchingMulticallResults,\r\n  removeMulticallListeners,\r\n  toCallKey,\r\n  updateMulticallResults,\r\n} from './actions';\r\n\r\nexport interface MulticallState {\r\n  callListeners?: {\r\n    // on a per-chain basis\r\n    [chainId: number]: {\r\n      // stores for each call key the listeners' preferences\r\n      [callKey: string]: {\r\n        // stores how many listeners there are per each blocks per fetch preference\r\n        [blocksPerFetch: number]: number;\r\n      };\r\n    };\r\n  };\r\n\r\n  callResults: {\r\n    [chainId: number]: {\r\n      [callKey: string]: {\r\n        data?: string | null;\r\n        blockNumber?: number;\r\n        fetchingBlockNumber?: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nconst initialState: MulticallState = {\r\n  callResults: {},\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addMulticallListeners, (state, { payload: { calls, chainId, options: { blocksPerFetch = 1 } = {} } }) => {\r\n      const listeners: MulticallState['callListeners'] = state.callListeners\r\n        ? state.callListeners\r\n        : (state.callListeners = {});\r\n      listeners[chainId] = listeners[chainId] ?? {};\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call);\r\n        listeners[chainId][callKey] = listeners[chainId][callKey] ?? {};\r\n        listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1;\r\n      });\r\n    })\r\n    .addCase(\r\n      removeMulticallListeners,\r\n      (state, { payload: { chainId, calls, options: { blocksPerFetch = 1 } = {} } }) => {\r\n        const listeners: MulticallState['callListeners'] = state.callListeners\r\n          ? state.callListeners\r\n          : (state.callListeners = {});\r\n\r\n        if (!listeners[chainId]) return;\r\n        calls.forEach((call) => {\r\n          const callKey = toCallKey(call);\r\n          if (!listeners[chainId][callKey]) return;\r\n          if (!listeners[chainId][callKey][blocksPerFetch]) return;\r\n\r\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\r\n            delete listeners[chainId][callKey][blocksPerFetch];\r\n          } else {\r\n            listeners[chainId][callKey][blocksPerFetch]--;\r\n          }\r\n        });\r\n      }\r\n    )\r\n    .addCase(fetchingMulticallResults, (state, { payload: { chainId, fetchingBlockNumber, calls } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {};\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call);\r\n        const current = state.callResults[chainId][callKey];\r\n        if (!current) {\r\n          state.callResults[chainId][callKey] = {\r\n            fetchingBlockNumber,\r\n          };\r\n        } else {\r\n          if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return;\r\n          state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber;\r\n        }\r\n      });\r\n    })\r\n    .addCase(errorFetchingMulticallResults, (state, { payload: { fetchingBlockNumber, chainId, calls } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {};\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call);\r\n        const current = state.callResults[chainId][callKey];\r\n        if (!current) return; // only should be dispatched if we are already fetching\r\n        if (current.fetchingBlockNumber === fetchingBlockNumber) {\r\n          delete current.fetchingBlockNumber;\r\n          current.data = null;\r\n          current.blockNumber = fetchingBlockNumber;\r\n        }\r\n      });\r\n    })\r\n    .addCase(updateMulticallResults, (state, { payload: { chainId, results, blockNumber } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {};\r\n      Object.keys(results).forEach((callKey) => {\r\n        const current = state.callResults[chainId][callKey];\r\n        if ((current?.blockNumber ?? 0) > blockNumber) return;\r\n        state.callResults[chainId][callKey] = {\r\n          data: results[callKey],\r\n          blockNumber,\r\n        };\r\n      });\r\n    })\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}