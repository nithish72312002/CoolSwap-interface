{"ast":null,"code":"import CID from 'cids';\nimport { getCodec, rmPrefix } from 'multicodec';\nimport { decode, toB58String } from 'multihashes';\nexport function hexToUint8Array(hex) {\n  hex = hex.startsWith('0x') ? hex.substr(2) : hex;\n  if (hex.length % 2 !== 0) throw new Error('hex must have length that is multiple of 2');\n  var arr = new Uint8Array(hex.length / 2);\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = parseInt(hex.substr(i * 2, 2), 16);\n  }\n  return arr;\n}\nvar UTF_8_DECODER = new TextDecoder();\n\n/**\r\n * Returns the URI representation of the content hash for supported codecs\r\n * @param contenthash to decode\r\n */\nexport default function contenthashToUri(contenthash) {\n  var buff = hexToUint8Array(contenthash);\n  var codec = getCodec(buff); // the typing is wrong for @types/multicodec\n  switch (codec) {\n    case 'ipfs-ns':\n      {\n        var data = rmPrefix(buff);\n        var cid = new CID(data);\n        return \"ipfs://\".concat(toB58String(cid.multihash));\n      }\n    case 'ipns-ns':\n      {\n        var _data = rmPrefix(buff);\n        var _cid = new CID(_data);\n        var multihash = decode(_cid.multihash);\n        if (multihash.name === 'identity') {\n          return \"ipns://\".concat(UTF_8_DECODER.decode(multihash.digest).trim());\n        } else {\n          return \"ipns://\".concat(toB58String(_cid.multihash));\n        }\n      }\n    default:\n      throw new Error(\"Unrecognized codec: \".concat(codec));\n  }\n}","map":{"version":3,"names":["CID","getCodec","rmPrefix","decode","toB58String","hexToUint8Array","hex","startsWith","substr","length","Error","arr","Uint8Array","i","parseInt","UTF_8_DECODER","TextDecoder","contenthashToUri","contenthash","buff","codec","data","cid","concat","multihash","name","digest","trim"],"sources":["E:/testprojects/CoolSwap-interface/src/utils/contenthashToUri.ts"],"sourcesContent":["import CID from 'cids';\r\nimport { getCodec, rmPrefix } from 'multicodec';\r\nimport { decode, toB58String } from 'multihashes';\r\n\r\nexport function hexToUint8Array(hex: string): Uint8Array {\r\n  hex = hex.startsWith('0x') ? hex.substr(2) : hex;\r\n  if (hex.length % 2 !== 0) throw new Error('hex must have length that is multiple of 2');\r\n  const arr = new Uint8Array(hex.length / 2);\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i] = parseInt(hex.substr(i * 2, 2), 16);\r\n  }\r\n  return arr;\r\n}\r\n\r\nconst UTF_8_DECODER = new TextDecoder();\r\n\r\n/**\r\n * Returns the URI representation of the content hash for supported codecs\r\n * @param contenthash to decode\r\n */\r\nexport default function contenthashToUri(contenthash: string): string {\r\n  const buff = hexToUint8Array(contenthash);\r\n  const codec = getCodec(buff as Buffer); // the typing is wrong for @types/multicodec\r\n  switch (codec) {\r\n    case 'ipfs-ns': {\r\n      const data = rmPrefix(buff as Buffer);\r\n      const cid = new CID(data);\r\n      return `ipfs://${toB58String(cid.multihash)}`;\r\n    }\r\n    case 'ipns-ns': {\r\n      const data = rmPrefix(buff as Buffer);\r\n      const cid = new CID(data);\r\n      const multihash = decode(cid.multihash);\r\n      if (multihash.name === 'identity') {\r\n        return `ipns://${UTF_8_DECODER.decode(multihash.digest).trim()}`;\r\n      } else {\r\n        return `ipns://${toB58String(cid.multihash)}`;\r\n      }\r\n    }\r\n    default:\r\n      throw new Error(`Unrecognized codec: ${codec}`);\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,MAAM;AACtB,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,YAAY;AAC/C,SAASC,MAAM,EAAEC,WAAW,QAAQ,aAAa;AAEjD,OAAO,SAASC,eAAeA,CAACC,GAAW,EAAc;EACvDA,GAAG,GAAGA,GAAG,CAACC,UAAU,CAAC,IAAI,CAAC,GAAGD,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,GAAGF,GAAG;EAChD,IAAIA,GAAG,CAACG,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EACvF,IAAMC,GAAG,GAAG,IAAIC,UAAU,CAACN,GAAG,CAACG,MAAM,GAAG,CAAC,CAAC;EAC1C,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACF,MAAM,EAAEI,CAAC,EAAE,EAAE;IACnCF,GAAG,CAACE,CAAC,CAAC,GAAGC,QAAQ,CAACR,GAAG,CAACE,MAAM,CAACK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAC7C;EACA,OAAOF,GAAG;AACZ;AAEA,IAAMI,aAAa,GAAG,IAAIC,WAAW,CAAC,CAAC;;AAEvC;AACA;AACA;AACA;AACA,eAAe,SAASC,gBAAgBA,CAACC,WAAmB,EAAU;EACpE,IAAMC,IAAI,GAAGd,eAAe,CAACa,WAAW,CAAC;EACzC,IAAME,KAAK,GAAGnB,QAAQ,CAACkB,IAAc,CAAC,CAAC,CAAC;EACxC,QAAQC,KAAK;IACX,KAAK,SAAS;MAAE;QACd,IAAMC,IAAI,GAAGnB,QAAQ,CAACiB,IAAc,CAAC;QACrC,IAAMG,GAAG,GAAG,IAAItB,GAAG,CAACqB,IAAI,CAAC;QACzB,iBAAAE,MAAA,CAAiBnB,WAAW,CAACkB,GAAG,CAACE,SAAS,CAAC;MAC7C;IACA,KAAK,SAAS;MAAE;QACd,IAAMH,KAAI,GAAGnB,QAAQ,CAACiB,IAAc,CAAC;QACrC,IAAMG,IAAG,GAAG,IAAItB,GAAG,CAACqB,KAAI,CAAC;QACzB,IAAMG,SAAS,GAAGrB,MAAM,CAACmB,IAAG,CAACE,SAAS,CAAC;QACvC,IAAIA,SAAS,CAACC,IAAI,KAAK,UAAU,EAAE;UACjC,iBAAAF,MAAA,CAAiBR,aAAa,CAACZ,MAAM,CAACqB,SAAS,CAACE,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC;QAChE,CAAC,MAAM;UACL,iBAAAJ,MAAA,CAAiBnB,WAAW,CAACkB,IAAG,CAACE,SAAS,CAAC;QAC7C;MACF;IACA;MACE,MAAM,IAAId,KAAK,wBAAAa,MAAA,CAAwBH,KAAK,CAAE,CAAC;EACnD;AACF"},"metadata":{},"sourceType":"module"}