{"ast":null,"code":"import _defineProperty from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport { BLOCKED_PRICE_IMPACT_NON_EXPERT } from '../constants';\nimport { CurrencyAmount, JSBI, Percent, TokenAmount } from '@uniswap/sdk';\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_LOW, ALLOWED_PRICE_IMPACT_MEDIUM } from '../constants';\nimport { Field } from '../state/swap/actions';\nimport { basisPointsToPercent } from './index';\nvar BASE_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000));\nvar ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000));\nvar INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE);\n\n// computes price breakdown for the trade\nexport function computeTradePriceBreakdown(trade) {\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n  var realizedLPFee = !trade ? undefined : ONE_HUNDRED_PERCENT.subtract(trade.route.pairs.reduce(function (currentFee) {\n    return currentFee.multiply(INPUT_FRACTION_AFTER_FEE);\n  }, ONE_HUNDRED_PERCENT));\n\n  // remove lp fees from price impact\n  var priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined;\n\n  // the x*y=k impact\n  var priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction ? new Percent(priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.numerator, priceImpactWithoutFeeFraction === null || priceImpactWithoutFeeFraction === void 0 ? void 0 : priceImpactWithoutFeeFraction.denominator) : undefined;\n\n  // the amount of the input that accrues to LPs\n  var realizedLPFeeAmount = realizedLPFee && trade && (trade.inputAmount instanceof TokenAmount ? new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient) : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient));\n  return {\n    priceImpactWithoutFee: priceImpactWithoutFeePercent,\n    realizedLPFee: realizedLPFeeAmount\n  };\n}\n\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\nexport function computeSlippageAdjustedAmounts(trade, allowedSlippage) {\n  var _ref;\n  var pct = basisPointsToPercent(allowedSlippage);\n  return _ref = {}, _defineProperty(_ref, Field.INPUT, trade === null || trade === void 0 ? void 0 : trade.maximumAmountIn(pct)), _defineProperty(_ref, Field.OUTPUT, trade === null || trade === void 0 ? void 0 : trade.minimumAmountOut(pct)), _ref;\n}\nexport function warningSeverity(priceImpact) {\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT))) return 4;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_HIGH))) return 3;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM))) return 2;\n  if (!(priceImpact === null || priceImpact === void 0 ? void 0 : priceImpact.lessThan(ALLOWED_PRICE_IMPACT_LOW))) return 1;\n  return 0;\n}\nexport function formatExecutionPrice(trade, inverted) {\n  if (!trade) {\n    return '';\n  }\n  return inverted ? \"\".concat(trade.executionPrice.invert().toSignificant(6), \" \").concat(trade.inputAmount.currency.symbol, \" / \").concat(trade.outputAmount.currency.symbol) : \"\".concat(trade.executionPrice.toSignificant(6), \" \").concat(trade.outputAmount.currency.symbol, \" / \").concat(trade.inputAmount.currency.symbol);\n}","map":{"version":3,"names":["BLOCKED_PRICE_IMPACT_NON_EXPERT","CurrencyAmount","JSBI","Percent","TokenAmount","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","Field","basisPointsToPercent","BASE_FEE","BigInt","ONE_HUNDRED_PERCENT","INPUT_FRACTION_AFTER_FEE","subtract","computeTradePriceBreakdown","trade","realizedLPFee","undefined","route","pairs","reduce","currentFee","multiply","priceImpactWithoutFeeFraction","priceImpact","priceImpactWithoutFeePercent","numerator","denominator","realizedLPFeeAmount","inputAmount","token","raw","quotient","ether","priceImpactWithoutFee","computeSlippageAdjustedAmounts","allowedSlippage","_ref","pct","_defineProperty","INPUT","maximumAmountIn","OUTPUT","minimumAmountOut","warningSeverity","lessThan","formatExecutionPrice","inverted","concat","executionPrice","invert","toSignificant","currency","symbol","outputAmount"],"sources":["E:/testprojects/CoolSwap-interface/src/utils/prices.ts"],"sourcesContent":["import { BLOCKED_PRICE_IMPACT_NON_EXPERT } from '../constants';\r\nimport { CurrencyAmount, Fraction, JSBI, Percent, TokenAmount, Trade } from '@uniswap/sdk';\r\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_LOW, ALLOWED_PRICE_IMPACT_MEDIUM } from '../constants';\r\nimport { Field } from '../state/swap/actions';\r\nimport { basisPointsToPercent } from './index';\r\n\r\nconst BASE_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000));\r\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000));\r\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(BASE_FEE);\r\n\r\n// computes price breakdown for the trade\r\nexport function computeTradePriceBreakdown(trade?: Trade | null): {\r\n  priceImpactWithoutFee: Percent | undefined;\r\n  realizedLPFee: CurrencyAmount | undefined | null;\r\n} {\r\n  // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\r\n  // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\r\n  const realizedLPFee = !trade\r\n    ? undefined\r\n    : ONE_HUNDRED_PERCENT.subtract(\r\n        trade.route.pairs.reduce<Fraction>(\r\n          (currentFee: Fraction): Fraction => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\r\n          ONE_HUNDRED_PERCENT\r\n        )\r\n      );\r\n\r\n  // remove lp fees from price impact\r\n  const priceImpactWithoutFeeFraction = trade && realizedLPFee ? trade.priceImpact.subtract(realizedLPFee) : undefined;\r\n\r\n  // the x*y=k impact\r\n  const priceImpactWithoutFeePercent = priceImpactWithoutFeeFraction\r\n    ? new Percent(priceImpactWithoutFeeFraction?.numerator, priceImpactWithoutFeeFraction?.denominator)\r\n    : undefined;\r\n\r\n  // the amount of the input that accrues to LPs\r\n  const realizedLPFeeAmount =\r\n    realizedLPFee &&\r\n    trade &&\r\n    (trade.inputAmount instanceof TokenAmount\r\n      ? new TokenAmount(trade.inputAmount.token, realizedLPFee.multiply(trade.inputAmount.raw).quotient)\r\n      : CurrencyAmount.ether(realizedLPFee.multiply(trade.inputAmount.raw).quotient));\r\n\r\n  return { priceImpactWithoutFee: priceImpactWithoutFeePercent, realizedLPFee: realizedLPFeeAmount };\r\n}\r\n\r\n// computes the minimum amount out and maximum amount in for a trade given a user specified allowed slippage in bips\r\nexport function computeSlippageAdjustedAmounts(\r\n  trade: Trade | undefined,\r\n  allowedSlippage: number\r\n): { [field in Field]?: CurrencyAmount } {\r\n  const pct = basisPointsToPercent(allowedSlippage);\r\n  return {\r\n    [Field.INPUT]: trade?.maximumAmountIn(pct),\r\n    [Field.OUTPUT]: trade?.minimumAmountOut(pct),\r\n  };\r\n}\r\n\r\nexport function warningSeverity(priceImpact: Percent | undefined): 0 | 1 | 2 | 3 | 4 {\r\n  if (!priceImpact?.lessThan(BLOCKED_PRICE_IMPACT_NON_EXPERT)) return 4;\r\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) return 3;\r\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_MEDIUM)) return 2;\r\n  if (!priceImpact?.lessThan(ALLOWED_PRICE_IMPACT_LOW)) return 1;\r\n  return 0;\r\n}\r\n\r\nexport function formatExecutionPrice(trade?: Trade, inverted?: boolean): string {\r\n  if (!trade) {\r\n    return '';\r\n  }\r\n  return inverted\r\n    ? `${trade.executionPrice.invert().toSignificant(6)} ${trade.inputAmount.currency.symbol} / ${\r\n        trade.outputAmount.currency.symbol\r\n      }`\r\n    : `${trade.executionPrice.toSignificant(6)} ${trade.outputAmount.currency.symbol} / ${\r\n        trade.inputAmount.currency.symbol\r\n      }`;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}