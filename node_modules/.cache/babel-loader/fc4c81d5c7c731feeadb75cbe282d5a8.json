{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n  var hasSeed = false;\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n  return function scanOperatorFunction(source) {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\nvar ScanOperator = /*@__PURE__*/function () {\n  function ScanOperator(accumulator, seed, hasSeed) {\n    if (hasSeed === void 0) {\n      hasSeed = false;\n    }\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.hasSeed = hasSeed;\n  }\n  ScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  };\n  return ScanOperator;\n}();\nvar ScanSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ScanSubscriber, _super);\n  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n    var _this = _super.call(this, destination) || this;\n    _this.accumulator = accumulator;\n    _this._seed = _seed;\n    _this.hasSeed = hasSeed;\n    _this.index = 0;\n    return _this;\n  }\n  Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n    get: function get() {\n      return this._seed;\n    },\n    set: function set(value) {\n      this.hasSeed = true;\n      this._seed = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ScanSubscriber.prototype._next = function (value) {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  };\n  ScanSubscriber.prototype._tryNext = function (value) {\n    var index = this.index++;\n    var result;\n    try {\n      result = this.accumulator(this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  };\n  return ScanSubscriber;\n}(Subscriber);","map":{"version":3,"names":["tslib_1","Subscriber","scan","accumulator","seed","hasSeed","arguments","length","scanOperatorFunction","source","lift","ScanOperator","prototype","call","subscriber","subscribe","ScanSubscriber","_super","__extends","destination","_seed","_this","index","defineProperty","get","set","value","enumerable","configurable","_next","next","_tryNext","result","err","error"],"sources":["../../../src/internal/operators/scan.ts"],"sourcesContent":[null],"mappings":";AAEA,OAAO,KAAEA,OAAU,MAAE,OAAM;AAoD3B,SAAMC,UAAU,QAAW,eAAiE;OAC1F,SAAWC,IAAGA,CAAAC,WAAM,EAAAC,IAAA;EAMpB,IAAIC,OAAA,GAAU;MACZC,SAAO,CAAGC,MAAK;IAChBF,OAAA;EAED;SACE,SAAOG,oBAAgBA,CAAAC,MAAa;IACpC,OAAAA,MAAA,CAAAC,IAAA,KAAAC,YAAA,CAAAR,WAAA,EAAAC,IAAA,EAAAC,OAAA;EACH;AAED;IACEM,YAAA,gBAAoB,YAAmF;WAAAA,aAAAR,WAAA,EAAAC,IAAA,EAAAC,OAAwB;IAA3G,IAAAA,OAAA,KAAW,KAAX;MAA6DA,OAAI,GAAJ,KAAY;IAAU;IAA4B,KAAAF,WAAA,GAAAA,WAAA;IAEnI,KAAAC,IAAA,GAAAA,IAAA;IACE,KAAAC,OAAO,GAAOA,OAAA;EAChB;EACFM,YAAA,CAAAC,SAAC,CAAAC,IAAA,aAAAC,UAAA,EAAAL,MAAA;IAAA,OAAAA,MAAA,CAAAM,SAAA,KAAAC,cAAA,CAAAF,UAAA,OAAAX,WAAA,OAAAC,IAAA,OAAAC,OAAA;EAOD;EAAmC,OAAAM,YAAA;GAYjC;kBAAA,GAEE,uBAAMM,MAAY;SAF4B,CAAAC,SAAA,CAAAF,cAAA,EAAAC,MAAmD;WAAUD,cAAKA,CAAOG,WAAA,EAAAhB,WAAA,EAAAiB,KAAA,EAAAf,OAAA;IACrG,IAAAgB,KAAA,GAAAJ,MAAA,CAAAJ,IAAO,CAAS,MAAAM,WAAA;IAZ5BE,KAAA,CAAAlB,WAAkB,GAAAA,WAAA;;IAczBkB,KAAA,CAAAhB,OAAA,GAAAA,OAAA;IAZDgB,KAAA,CAAAC,KAAA;WAAAD,KAAA;;QAEC,CAAAE,cAAA,CAAAP,cAAA,CAAAJ,SAAA;SAED,SAAAY,IAAA,EAAS;MACP,OAAK,KAAOJ,KAAG;;IAEjBK,GAAC,WAAAA,IAAAC,KAAA;;;IALA;IAYSC,UAAA;IACRC,YAAU;;gBAEH,CAAAhB,SAAW,CAACiB,KAAK,aAAOH,KAAA;QAC9B,MAAArB,OAAA;UAAM,CAAAD,IAAA,GAAAsB,KAAA;MACL,KAAAP,WAAY,CAAAW,IAAS,CAAAJ,KAAM,CAAC;KAC7B,MACF;MAEO,YAAAK,QAAA,CAAAL,KAAQ;IACd;;gBAEI,CAAAd,SAAA,CAAAmB,QAAA,aAAAL,KAAA;QACFJ,KAAA,GAAM,IAAG,CAAIA,KAAC;QACfU,MAAA;IAAC;MACAA,MAAK,QAAA7B,WAAkB,CAAG,IAAE,CAAAC,IAAA,EAAAsB,KAAA,EAAAJ,KAAA;KAC7B,CACD,OAAKW,GAAI,EAAG;MACR,IAAC,CAAAd,WAAY,CAAIe,KAAC,CAAAD,GAAQ;IAC/B;IACH,KAAA7B,IAAA,GAAA4B,MAAC;IArCkC,IAAU,CAAAb,WAqC5C,CAAAW,IAAA,CAAAE,MAAA"},"metadata":{},"sourceType":"module"}