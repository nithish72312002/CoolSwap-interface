{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nvar sha256_1 = require(\"@noble/hashes/sha256\");\nvar utils_1 = require(\"@noble/hashes/utils\");\nvar modular_js_1 = require(\"./abstract/modular.js\");\nvar weierstrass_js_1 = require(\"./abstract/weierstrass.js\");\nvar utils_js_1 = require(\"./abstract/utils.js\");\nvar hash_to_curve_js_1 = require(\"./abstract/hash-to-curve.js\");\nvar _shortw_utils_js_1 = require(\"./_shortw_utils.js\");\nvar secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nvar secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nvar _1n = BigInt(1);\nvar _2n = BigInt(2);\nvar divNearest = function divNearest(a, b) {\n  return (a + b / _2n) / b;\n};\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n  var P = secp256k1P;\n  // prettier-ignore\n  var _3n = BigInt(3),\n    _6n = BigInt(6),\n    _11n = BigInt(11),\n    _22n = BigInt(22);\n  // prettier-ignore\n  var _23n = BigInt(23),\n    _44n = BigInt(44),\n    _88n = BigInt(88);\n  var b2 = y * y * y % P; // x^3, 11\n  var b3 = b2 * b2 * y % P; // x^7\n  var b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;\n  var b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;\n  var b11 = (0, modular_js_1.pow2)(b9, _2n, P) * b2 % P;\n  var b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;\n  var b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;\n  var b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;\n  var b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;\n  var b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;\n  var b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;\n  var t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;\n  var t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;\n  var root = (0, modular_js_1.pow2)(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\nvar Fp = (0, modular_js_1.Field)(secp256k1P, undefined, undefined, {\n  sqrt: sqrtMod\n});\nexports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({\n  a: BigInt(0),\n  b: BigInt(7),\n  Fp: Fp,\n  n: secp256k1N,\n  // Base point (x, y) aka generator point\n  Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n  Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n  h: BigInt(1),\n  lowS: true,\n  /**\n   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n   */\n  endo: {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar: function splitScalar(k) {\n      var n = secp256k1N;\n      var a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n      var b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n      var a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n      var b2 = a1;\n      var POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n      var c1 = divNearest(b2 * k, n);\n      var c2 = divNearest(-b1 * k, n);\n      var k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);\n      var k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);\n      var k1neg = k1 > POW_2_128;\n      var k2neg = k2 > POW_2_128;\n      if (k1neg) k1 = n - k1;\n      if (k2neg) k2 = n - k2;\n      if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalar: Endomorphism failed, k=' + k);\n      }\n      return {\n        k1neg: k1neg,\n        k1: k1,\n        k2neg: k2neg,\n        k2: k2\n      };\n    }\n  }\n}, sha256_1.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nvar _0n = BigInt(0);\nvar fe = function fe(x) {\n  return typeof x === 'bigint' && _0n < x && x < secp256k1P;\n};\nvar ge = function ge(x) {\n  return typeof x === 'bigint' && _0n < x && x < secp256k1N;\n};\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nvar TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag) {\n  var tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    var tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, function (c) {\n      return c.charCodeAt(0);\n    }));\n    tagP = (0, utils_js_1.concatBytes)(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n  return (0, sha256_1.sha256)((0, utils_js_1.concatBytes).apply(void 0, [tagP].concat(messages)));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nvar pointToBytes = function pointToBytes(point) {\n  return point.toRawBytes(true).slice(1);\n};\nvar numTo32b = function numTo32b(n) {\n  return (0, utils_js_1.numberToBytesBE)(n, 32);\n};\nvar modP = function modP(x) {\n  return (0, modular_js_1.mod)(x, secp256k1P);\n};\nvar modN = function modN(x) {\n  return (0, modular_js_1.mod)(x, secp256k1N);\n};\nvar Point = exports.secp256k1.ProjectivePoint;\nvar GmulAdd = function GmulAdd(Q, a, b) {\n  return Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n};\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n  var d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  var p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  var scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return {\n    scalar: scalar,\n    bytes: pointToBytes(p)\n  };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  var xx = modP(x * x);\n  var c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  var y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  var p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return modN((0, utils_js_1.bytesToNumberBE)(taggedHash.apply(void 0, ['BIP0340/challenge'].concat(args))));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey) {\n  var auxRand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (0, utils_1.randomBytes)(32);\n  var m = (0, utils_js_1.ensureBytes)('message', message);\n  var _schnorrGetExtPubKey = schnorrGetExtPubKey(privateKey),\n    px = _schnorrGetExtPubKey.bytes,\n    d = _schnorrGetExtPubKey.scalar; // checks for isWithinCurveOrder\n  var a = (0, utils_js_1.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  var t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  var rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  var k_ = modN((0, utils_js_1.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  var _schnorrGetExtPubKey2 = schnorrGetExtPubKey(k_),\n    rx = _schnorrGetExtPubKey2.bytes,\n    k = _schnorrGetExtPubKey2.scalar; // Let R = k'⋅G.\n  var e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  var sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n  var sig = (0, utils_js_1.ensureBytes)('signature', signature, 64);\n  var m = (0, utils_js_1.ensureBytes)('message', message);\n  var pub = (0, utils_js_1.ensureBytes)('publicKey', publicKey, 32);\n  try {\n    var P = lift_x((0, utils_js_1.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n    var r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    var s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    var e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    var R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\nexports.schnorr = function () {\n  return {\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n      randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,\n      lift_x: lift_x,\n      pointToBytes: pointToBytes,\n      numberToBytesBE: utils_js_1.numberToBytesBE,\n      bytesToNumberBE: utils_js_1.bytesToNumberBE,\n      taggedHash: taggedHash,\n      mod: modular_js_1.mod\n    }\n  };\n}();\nvar isoMap = /* @__PURE__ */function () {\n  return (0, hash_to_curve_js_1.isogenyMap)(Fp, [\n  // xNum\n  ['0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7', '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581', '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262', '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c'],\n  // xDen\n  ['0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b', '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n  ],\n  // yNum\n  ['0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c', '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3', '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931', '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84'],\n  // yDen\n  ['0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b', '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573', '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n  ]].map(function (i) {\n    return i.map(function (j) {\n      return BigInt(j);\n    });\n  }));\n}();\nvar mapSWU = /* @__PURE__ */function () {\n  return (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11'))\n  });\n}();\nvar htf = /* @__PURE__ */function () {\n  return (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, function (scalars) {\n    var _mapSWU = mapSWU(Fp.create(scalars[0])),\n      x = _mapSWU.x,\n      y = _mapSWU.y;\n    return isoMap(x, y);\n  }, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256_1.sha256\n  });\n}();\nexports.hashToCurve = function () {\n  return htf.hashToCurve;\n}();\nexports.encodeToCurve = function () {\n  return htf.encodeToCurve;\n}();","map":{"version":3,"names":["sha256_1","require","utils_1","modular_js_1","weierstrass_js_1","utils_js_1","hash_to_curve_js_1","_shortw_utils_js_1","secp256k1P","BigInt","secp256k1N","_1n","_2n","divNearest","a","b","sqrtMod","y","P","_3n","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","pow2","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","root","Fp","eql","sqr","Error","Field","undefined","sqrt","exports","secp256k1","createCurve","n","Gx","Gy","h","lowS","endo","beta","splitScalar","k","a1","b1","a2","POW_2_128","c1","c2","k1","mod","k2","k1neg","k2neg","sha256","_0n","fe","x","ge","TAGGED_HASH_PREFIXES","taggedHash","tag","tagP","tagH","Uint8Array","from","c","charCodeAt","concatBytes","_len","arguments","length","messages","Array","_key","apply","concat","pointToBytes","point","toRawBytes","slice","numTo32b","numberToBytesBE","modP","modN","Point","ProjectivePoint","GmulAdd","Q","BASE","multiplyAndAddUnsafe","schnorrGetExtPubKey","priv","d_","utils","normPrivateKeyToScalar","p","fromPrivateKey","scalar","hasEvenY","bytes","lift_x","xx","assertValidity","challenge","_len2","args","_key2","bytesToNumberBE","schnorrGetPublicKey","privateKey","schnorrSign","message","auxRand","randomBytes","m","ensureBytes","_schnorrGetExtPubKey","px","d","t","rand","k_","_schnorrGetExtPubKey2","rx","e","sig","set","schnorrVerify","signature","publicKey","pub","r","subarray","s","R","toAffine","error","schnorr","getPublicKey","sign","verify","randomPrivateKey","isoMap","isogenyMap","map","i","j","mapSWU","mapToCurveSimpleSWU","A","B","Z","create","htf","createHasher","scalars","_mapSWU","DST","encodeDST","ORDER","expand","hash","hashToCurve","encodeToCurve"],"sources":["src/secp256k1.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}