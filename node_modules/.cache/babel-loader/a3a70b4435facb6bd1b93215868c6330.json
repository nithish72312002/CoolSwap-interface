{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashToPrivateScalar = exports.FpSqrtEven = exports.FpSqrtOdd = exports.Field = exports.nLength = exports.FpIsSquare = exports.FpDiv = exports.FpInvertBatch = exports.FpPow = exports.validateField = exports.isNegativeLE = exports.FpSqrt = exports.tonelliShanks = exports.invert = exports.pow2 = exports.pow = exports.mod = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nvar utils_js_1 = require(\"./utils.js\");\n// prettier-ignore\nvar _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3);\n// prettier-ignore\nvar _4n = BigInt(4),\n  _5n = BigInt(5),\n  _8n = BigInt(8);\n// prettier-ignore\nvar _9n = BigInt(9),\n  _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n  var result = a % b;\n  return result >= _0n ? result : b + result;\n}\nexports.mod = mod;\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  var res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = res * num % modulo;\n    num = num * num % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\nexports.pow = pow;\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n  var res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\nexports.pow2 = pow2;\n// Inverses number over modulo\nfunction invert(number, modulo) {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(\"invert: expected positive integers, got n=\".concat(number, \" mod=\").concat(modulo));\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  var a = mod(number, modulo);\n  var b = modulo;\n  // prettier-ignore\n  var x = _0n,\n    y = _1n,\n    u = _1n,\n    v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    var q = b / a;\n    var r = b % a;\n    var m = x - u * q;\n    var n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  var gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\nexports.invert = invert;\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nfunction tonelliShanks(P) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  var legendreC = (P - _1n) / _2n;\n  var Q, S, Z;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n  // Fast-path\n  if (S === 1) {\n    var p1div4 = (P + _1n) / _4n;\n    return function tonelliFast(Fp, n) {\n      var root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n  // Slow-path\n  var Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow(Fp, n) {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    var r = S;\n    // TODO: will fail at Fp2/etc\n    var g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    var x = Fp.pow(n, Q1div2); // first guess at the square root\n    var b = Fp.pow(n, Q); // first guess at the fudge factor\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      var m = 1;\n      for (var t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      var ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\nexports.tonelliShanks = tonelliShanks;\nfunction FpSqrt(P) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    var p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4(Fp, n) {\n      var root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    var c1 = (P - _5n) / _8n;\n    return function sqrt5mod8(Fp, n) {\n      var n2 = Fp.mul(n, _2n);\n      var v = Fp.pow(n2, c1);\n      var nv = Fp.mul(n, v);\n      var i = Fp.mul(Fp.mul(nv, _2n), v);\n      var root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\nexports.FpSqrt = FpSqrt;\n// Little-endian check for first LE bit (last BE bit);\nvar isNegativeLE = function isNegativeLE(num, modulo) {\n  return (mod(num, modulo) & _1n) === _1n;\n};\nexports.isNegativeLE = isNegativeLE;\n// prettier-ignore\nvar FIELD_FIELDS = ['create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr', 'eql', 'add', 'sub', 'mul', 'pow', 'div', 'addN', 'subN', 'mulN', 'sqrN'];\nfunction validateField(field) {\n  var initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger'\n  };\n  var opts = FIELD_FIELDS.reduce(function (map, val) {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return (0, utils_js_1.validateObject)(field, opts);\n}\nexports.validateField = validateField;\n// Generic field functions\nfunction FpPow(f, num, power) {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  var p = f.ONE;\n  var d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\nexports.FpPow = FpPow;\n// 0 is non-invertible: non-batched version will throw on 0\nfunction FpInvertBatch(f, nums) {\n  var tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  var lastMultiplied = nums.reduce(function (acc, num, i) {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  var inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight(function (acc, num, i) {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\nexports.FpInvertBatch = FpInvertBatch;\nfunction FpDiv(f, lhs, rhs) {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\nexports.FpDiv = FpDiv;\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n  var legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return function (x) {\n    var p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\nexports.FpIsSquare = FpIsSquare;\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n  // Bit size, byte size of CURVE.n\n  var _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  var nByteLength = Math.ceil(_nBitLength / 8);\n  return {\n    nBitLength: _nBitLength,\n    nByteLength: nByteLength\n  };\n}\nexports.nLength = nLength;\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen) {\n  var isLE = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var redef = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (ORDER <= _0n) throw new Error(\"Expected Fp ORDER > 0, got \".concat(ORDER));\n  var _nLength = nLength(ORDER, bitLen),\n    BITS = _nLength.nBitLength,\n    BYTES = _nLength.nByteLength;\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  var sqrtP = FpSqrt(ORDER);\n  var f = Object.freeze({\n    ORDER: ORDER,\n    BITS: BITS,\n    BYTES: BYTES,\n    MASK: (0, utils_js_1.bitMask)(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: function create(num) {\n      return mod(num, ORDER);\n    },\n    isValid: function isValid(num) {\n      if (typeof num !== 'bigint') throw new Error(\"Invalid field element: expected bigint, got \".concat(typeof num));\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n\n    is0: function is0(num) {\n      return num === _0n;\n    },\n    isOdd: function isOdd(num) {\n      return (num & _1n) === _1n;\n    },\n    neg: function neg(num) {\n      return mod(-num, ORDER);\n    },\n    eql: function eql(lhs, rhs) {\n      return lhs === rhs;\n    },\n    sqr: function sqr(num) {\n      return mod(num * num, ORDER);\n    },\n    add: function add(lhs, rhs) {\n      return mod(lhs + rhs, ORDER);\n    },\n    sub: function sub(lhs, rhs) {\n      return mod(lhs - rhs, ORDER);\n    },\n    mul: function mul(lhs, rhs) {\n      return mod(lhs * rhs, ORDER);\n    },\n    pow: function pow(num, power) {\n      return FpPow(f, num, power);\n    },\n    div: function div(lhs, rhs) {\n      return mod(lhs * invert(rhs, ORDER), ORDER);\n    },\n    // Same as above, but doesn't normalize\n    sqrN: function sqrN(num) {\n      return num * num;\n    },\n    addN: function addN(lhs, rhs) {\n      return lhs + rhs;\n    },\n    subN: function subN(lhs, rhs) {\n      return lhs - rhs;\n    },\n    mulN: function mulN(lhs, rhs) {\n      return lhs * rhs;\n    },\n    inv: function inv(num) {\n      return invert(num, ORDER);\n    },\n    sqrt: redef.sqrt || function (n) {\n      return sqrtP(f, n);\n    },\n    invertBatch: function invertBatch(lst) {\n      return FpInvertBatch(f, lst);\n    },\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: function cmov(a, b, c) {\n      return c ? b : a;\n    },\n    toBytes: function toBytes(num) {\n      return isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES);\n    },\n    fromBytes: function fromBytes(bytes) {\n      if (bytes.length !== BYTES) throw new Error(\"Fp.fromBytes: expected \".concat(BYTES, \", got \").concat(bytes.length));\n      return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);\n    }\n  });\n  return Object.freeze(f);\n}\nexports.Field = Field;\nfunction FpSqrtOdd(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  var root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexports.FpSqrtOdd = FpSqrtOdd;\nfunction FpSqrtEven(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  var root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\nexports.FpSqrtEven = FpSqrtEven;\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. curveFn.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction hashToPrivateScalar(hash, groupOrder) {\n  var isLE = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  hash = (0, utils_js_1.ensureBytes)('privateHash', hash);\n  var hashLen = hash.length;\n  var minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(\"hashToPrivateScalar: expected \".concat(minLen, \"-1024 bytes of input, got \").concat(hashLen));\n  var num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\nexports.hashToPrivateScalar = hashToPrivateScalar;","map":{"version":3,"names":["utils_js_1","require","_0n","BigInt","_1n","_2n","_3n","_4n","_5n","_8n","_9n","_16n","mod","a","b","result","exports","pow","num","power","modulo","Error","res","pow2","x","invert","number","concat","y","u","v","q","r","m","n","gcd","tonelliShanks","P","legendreC","Q","S","Z","p1div4","tonelliFast","Fp","root","eql","sqr","Q1div2","tonelliSlow","neg","ONE","g","mul","ZERO","t2","ge","FpSqrt","sqrt3mod4","c1","sqrt5mod8","n2","nv","i","sub","isNegativeLE","FIELD_FIELDS","validateField","field","initial","ORDER","MASK","BYTES","BITS","opts","reduce","map","val","validateObject","FpPow","f","p","d","FpInvertBatch","nums","tmp","Array","length","lastMultiplied","acc","is0","inverted","inv","reduceRight","FpDiv","lhs","rhs","FpIsSquare","legendreConst","nLength","nBitLength","_nBitLength","undefined","toString","nByteLength","Math","ceil","Field","bitLen","isLE","arguments","redef","_nLength","sqrtP","Object","freeze","bitMask","create","isValid","isOdd","add","div","sqrN","addN","subN","mulN","sqrt","invertBatch","lst","cmov","c","toBytes","numberToBytesLE","numberToBytesBE","fromBytes","bytes","bytesToNumberLE","bytesToNumberBE","FpSqrtOdd","elm","FpSqrtEven","hashToPrivateScalar","hash","groupOrder","ensureBytes","hashLen","minLen"],"sources":["../src/abstract/modular.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script"}