{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nimport { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json';\nimport { ROUTER_ADDRESS } from '../constants';\nimport { JSBI, Percent, Token, ETHER } from '@uniswap/sdk';\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value) {\n  try {\n    return getAddress(value);\n  } catch (_unused) {\n    return false;\n  }\n}\nexport function getEtherscanLink(chainId, data, type) {\n  var prefix = \"https://explorer.jupiternft.xyz\";\n  switch (type) {\n    case 'transaction':\n      {\n        return \"\".concat(prefix, \"/tx/\").concat(data);\n      }\n    case 'token':\n      {\n        return \"\".concat(prefix, \"/token/\").concat(data);\n      }\n    case 'block':\n      {\n        return \"\".concat(prefix, \"/block/\").concat(data);\n      }\n    case 'address':\n    default:\n      {\n        return \"\".concat(prefix, \"/address/\").concat(data);\n      }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address) {\n  var chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var parsed = isAddress(address);\n  if (!parsed) {\n    throw Error(\"Invalid 'address' parameter '\".concat(address, \"'.\"));\n  }\n  return \"\".concat(parsed.substring(0, chars + 2), \"...\").concat(parsed.substring(42 - chars));\n}\n\n// add 10%\nexport function calculateGasMargin(value) {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num) {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000));\n}\nexport function calculateSlippageAmount(value, slippage) {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(\"Unexpected slippage value: \".concat(slippage));\n  }\n  return [JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)), JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000))];\n}\n\n// account is not optional\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n}\n\n// account is optional\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n}\n\n// account is optional\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(\"Invalid 'address' parameter '\".concat(address, \"'.\"));\n  }\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}\n\n// account is optional\nexport function getRouterContract(_, library, account) {\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account);\n}\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nexport function isTokenOnList(defaultTokens, currency) {\n  var _defaultTokens$curren;\n  if (currency === ETHER) return true;\n  return Boolean(currency instanceof Token && ((_defaultTokens$curren = defaultTokens[currency.chainId]) === null || _defaultTokens$curren === void 0 ? void 0 : _defaultTokens$curren[currency.address]));\n}","map":{"version":3,"names":["Contract","getAddress","AddressZero","BigNumber","abi","IUniswapV2Router02ABI","ROUTER_ADDRESS","JSBI","Percent","Token","ETHER","isAddress","value","_unused","getEtherscanLink","chainId","data","type","prefix","concat","shortenAddress","address","chars","arguments","length","undefined","parsed","Error","substring","calculateGasMargin","mul","from","add","div","basisPointsToPercent","num","BigInt","calculateSlippageAmount","slippage","divide","multiply","raw","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","ABI","getRouterContract","_","escapeRegExp","string","replace","isTokenOnList","defaultTokens","currency","_defaultTokens$curren","Boolean"],"sources":["E:/testprojects/CoolSwap-interface/src/utils/index.ts"],"sourcesContent":["import { Contract } from '@ethersproject/contracts';\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { AddressZero } from '@ethersproject/constants';\r\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json';\r\nimport { ROUTER_ADDRESS } from '../constants';\r\nimport { ChainId, JSBI, Percent, Token, CurrencyAmount, Currency, ETHER } from '@uniswap/sdk';\r\nimport { TokenAddressMap } from '../state/lists/hooks';\r\n\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value: any): string | false {\r\n  try {\r\n    return getAddress(value);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n\r\n\r\nexport function getEtherscanLink(\r\n  chainId: ChainId,\r\n  data: string,\r\n  type: 'transaction' | 'token' | 'address' | 'block'\r\n): string {\r\n  const prefix = `https://explorer.jupiternft.xyz`;\r\n\r\n  switch (type) {\r\n    case 'transaction': {\r\n      return `${prefix}/tx/${data}`;\r\n    }\r\n    case 'token': {\r\n      return `${prefix}/token/${data}`;\r\n    }\r\n    case 'block': {\r\n      return `${prefix}/block/${data}`;\r\n    }\r\n    case 'address':\r\n    default: {\r\n      return `${prefix}/address/${data}`;\r\n    }\r\n  }\r\n}\r\n\r\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\r\nexport function shortenAddress(address: string, chars = 4): string {\r\n  const parsed = isAddress(address);\r\n  if (!parsed) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`);\r\n  }\r\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\r\n}\r\n\r\n// add 10%\r\nexport function calculateGasMargin(value: BigNumber): BigNumber {\r\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));\r\n}\r\n\r\n// converts a basis points value to a sdk percent\r\nexport function basisPointsToPercent(num: number): Percent {\r\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000));\r\n}\r\n\r\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\r\n  if (slippage < 0 || slippage > 10000) {\r\n    throw Error(`Unexpected slippage value: ${slippage}`);\r\n  }\r\n  return [\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000)),\r\n  ];\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked();\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library;\r\n}\r\n\r\n// account is optional\r\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`);\r\n  }\r\n\r\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any);\r\n}\r\n\r\n// account is optional\r\nexport function getRouterContract(_: number, library: Web3Provider, account?: string): Contract {\r\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, library, account);\r\n}\r\n\r\nexport function escapeRegExp(string: string): string {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\n\r\nexport function isTokenOnList(defaultTokens: TokenAddressMap, currency?: Currency): boolean {\r\n  if (currency === ETHER) return true;\r\n  return Boolean(currency instanceof Token && defaultTokens[currency.chainId]?.[currency.address]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}