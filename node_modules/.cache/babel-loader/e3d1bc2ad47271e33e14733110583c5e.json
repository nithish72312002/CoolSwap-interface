{"ast":null,"code":"import _slicedToArray from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { injected } from '../connectors';\nimport { NetworkContextName } from '../constants';\nexport function useActiveWeb3React() {\n  var context = useWeb3ReactCore();\n  var contextNetwork = useWeb3ReactCore(NetworkContextName);\n  return context.active ? context : contextNetwork;\n}\nexport function useEagerConnect() {\n  var _useWeb3ReactCore = useWeb3ReactCore(),\n    activate = _useWeb3ReactCore.activate,\n    active = _useWeb3ReactCore.active; // specifically using useWeb3ReactCore because of what this hook does\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    tried = _useState2[0],\n    setTried = _useState2[1];\n  useEffect(function () {\n    injected.isAuthorized().then(function (isAuthorized) {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(function () {\n          setTried(true);\n        });\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).catch(function () {\n            setTried(true);\n          });\n        } else {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(function () {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n\n/**\r\n * Use for network and injected - logs user in\r\n * and out after checking what network theyre on\r\n */\nexport function useInactiveListener() {\n  var suppress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var _useWeb3ReactCore2 = useWeb3ReactCore(),\n    active = _useWeb3ReactCore2.active,\n    error = _useWeb3ReactCore2.error,\n    activate = _useWeb3ReactCore2.activate; // specifically using useWeb3React because of what this hook does\n\n  useEffect(function () {\n    var _window = window,\n      ethereum = _window.ethereum;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      var handleChainChanged = function handleChainChanged() {\n        // eat errors\n        activate(injected, undefined, true).catch(function (error) {\n          console.error('Failed to activate after chain changed', error);\n        });\n      };\n      var handleAccountsChanged = function handleAccountsChanged(accounts) {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(function (error) {\n            console.error('Failed to activate after accounts changed', error);\n          });\n        }\n      };\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      return function () {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        }\n      };\n    }\n    return undefined;\n  }, [active, error, suppress, activate]);\n}","map":{"version":3,"names":["useWeb3React","useWeb3ReactCore","useEffect","useState","isMobile","injected","NetworkContextName","useActiveWeb3React","context","contextNetwork","active","useEagerConnect","_useWeb3ReactCore","activate","_useState","_useState2","_slicedToArray","tried","setTried","isAuthorized","then","undefined","catch","window","ethereum","useInactiveListener","suppress","arguments","length","_useWeb3ReactCore2","error","_window","on","handleChainChanged","console","handleAccountsChanged","accounts","removeListener"],"sources":["E:/testprojects/CoolSwap-interface/src/hooks/index.ts"],"sourcesContent":["import { Web3Provider } from '@ethersproject/providers';\r\nimport { ChainId } from '@uniswap/sdk';\r\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\r\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types';\r\nimport { useEffect, useState } from 'react';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { injected } from '../connectors';\r\nimport { NetworkContextName } from '../constants';\r\n\r\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\r\n  const context = useWeb3ReactCore<Web3Provider>();\r\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName);\r\n  return context.active ? context : contextNetwork;\r\n}\r\n\r\nexport function useEagerConnect() {\r\n  const { activate, active } = useWeb3ReactCore(); // specifically using useWeb3ReactCore because of what this hook does\r\n  const [tried, setTried] = useState(false);\r\n\r\n  useEffect(() => {\r\n    injected.isAuthorized().then((isAuthorized) => {\r\n      if (isAuthorized) {\r\n        activate(injected, undefined, true).catch(() => {\r\n          setTried(true);\r\n        });\r\n      } else {\r\n        if (isMobile && window.ethereum) {\r\n          activate(injected, undefined, true).catch(() => {\r\n            setTried(true);\r\n          });\r\n        } else {\r\n          setTried(true);\r\n        }\r\n      }\r\n    });\r\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\r\n\r\n  // if the connection worked, wait until we get confirmation of that to flip the flag\r\n  useEffect(() => {\r\n    if (active) {\r\n      setTried(true);\r\n    }\r\n  }, [active]);\r\n\r\n  return tried;\r\n}\r\n\r\n/**\r\n * Use for network and injected - logs user in\r\n * and out after checking what network theyre on\r\n */\r\nexport function useInactiveListener(suppress = false) {\r\n  const { active, error, activate } = useWeb3ReactCore(); // specifically using useWeb3React because of what this hook does\r\n\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\r\n      const handleChainChanged = () => {\r\n        // eat errors\r\n        activate(injected, undefined, true).catch((error) => {\r\n          console.error('Failed to activate after chain changed', error);\r\n        });\r\n      };\r\n\r\n      const handleAccountsChanged = (accounts: string[]) => {\r\n        if (accounts.length > 0) {\r\n          // eat errors\r\n          activate(injected, undefined, true).catch((error) => {\r\n            console.error('Failed to activate after accounts changed', error);\r\n          });\r\n        }\r\n      };\r\n\r\n      ethereum.on('chainChanged', handleChainChanged);\r\n      ethereum.on('accountsChanged', handleAccountsChanged);\r\n\r\n      return () => {\r\n        if (ethereum.removeListener) {\r\n          ethereum.removeListener('chainChanged', handleChainChanged);\r\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n        }\r\n      };\r\n    }\r\n    return undefined;\r\n  }, [active, error, suppress, activate]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}