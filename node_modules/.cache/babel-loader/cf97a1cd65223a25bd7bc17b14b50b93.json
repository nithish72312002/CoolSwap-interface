{"ast":null,"code":"import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateMatchesDarkMode } from './actions';\nexport default function Updater() {\n  var dispatch = useDispatch();\n\n  // keep dark mode in sync with the system\n  useEffect(function () {\n    var _window;\n    var darkHandler = function darkHandler(match) {\n      dispatch(updateMatchesDarkMode({\n        matchesDarkMode: match.matches\n      }));\n    };\n    var match = (_window = window) === null || _window === void 0 ? void 0 : _window.matchMedia('(prefers-color-scheme: dark)');\n    dispatch(updateMatchesDarkMode({\n      matchesDarkMode: match.matches\n    }));\n    if (match === null || match === void 0 ? void 0 : match.addListener) {\n      match === null || match === void 0 ? void 0 : match.addListener(darkHandler);\n    } else if (match === null || match === void 0 ? void 0 : match.addEventListener) {\n      match === null || match === void 0 ? void 0 : match.addEventListener('change', darkHandler);\n    }\n    return function () {\n      if (match === null || match === void 0 ? void 0 : match.removeListener) {\n        match === null || match === void 0 ? void 0 : match.removeListener(darkHandler);\n      } else if (match === null || match === void 0 ? void 0 : match.removeEventListener) {\n        match === null || match === void 0 ? void 0 : match.removeEventListener('change', darkHandler);\n      }\n    };\n  }, [dispatch]);\n  return null;\n}","map":{"version":3,"names":["useEffect","useDispatch","updateMatchesDarkMode","Updater","dispatch","_window","darkHandler","match","matchesDarkMode","matches","window","matchMedia","addListener","addEventListener","removeListener","removeEventListener"],"sources":["E:/testprojects/CoolSwap-interface/src/state/user/updater.tsx"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AppDispatch } from '../index';\r\nimport { updateMatchesDarkMode } from './actions';\r\n\r\nexport default function Updater(): null {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  // keep dark mode in sync with the system\r\n  useEffect(() => {\r\n    const darkHandler = (match: MediaQueryListEvent) => {\r\n      dispatch(updateMatchesDarkMode({ matchesDarkMode: match.matches }));\r\n    };\r\n\r\n    const match = window?.matchMedia('(prefers-color-scheme: dark)');\r\n    dispatch(updateMatchesDarkMode({ matchesDarkMode: match.matches }));\r\n\r\n    if (match?.addListener) {\r\n      match?.addListener(darkHandler);\r\n    } else if (match?.addEventListener) {\r\n      match?.addEventListener('change', darkHandler);\r\n    }\r\n\r\n    return () => {\r\n      if (match?.removeListener) {\r\n        match?.removeListener(darkHandler);\r\n      } else if (match?.removeEventListener) {\r\n        match?.removeEventListener('change', darkHandler);\r\n      }\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return null;\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,aAAa;AAEzC,SAASC,qBAAqB,QAAQ,WAAW;AAEjD,eAAe,SAASC,OAAOA,CAAA,EAAS;EACtC,IAAMC,QAAQ,GAAGH,WAAW,CAAc,CAAC;;EAE3C;EACAD,SAAS,CAAC,YAAM;IAAA,IAAAK,OAAA;IACd,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,KAA0B,EAAK;MAClDH,QAAQ,CAACF,qBAAqB,CAAC;QAAEM,eAAe,EAAED,KAAK,CAACE;MAAQ,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,IAAMF,KAAK,IAAAF,OAAA,GAAGK,MAAM,cAAAL,OAAA,uBAANA,OAAA,CAAQM,UAAU,CAAC,8BAA8B,CAAC;IAChEP,QAAQ,CAACF,qBAAqB,CAAC;MAAEM,eAAe,EAAED,KAAK,CAACE;IAAQ,CAAC,CAAC,CAAC;IAEnE,IAAIF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEK,WAAW,EAAE;MACtBL,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEK,WAAW,CAACN,WAAW,CAAC;IACjC,CAAC,MAAM,IAAIC,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEM,gBAAgB,EAAE;MAClCN,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEM,gBAAgB,CAAC,QAAQ,EAAEP,WAAW,CAAC;IAChD;IAEA,OAAO,YAAM;MACX,IAAIC,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEO,cAAc,EAAE;QACzBP,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEO,cAAc,CAACR,WAAW,CAAC;MACpC,CAAC,MAAM,IAAIC,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEQ,mBAAmB,EAAE;QACrCR,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEQ,mBAAmB,CAAC,QAAQ,EAAET,WAAW,CAAC;MACnD;IACF,CAAC;EACH,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EAEd,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module"}