{"ast":null,"code":"import _toConsumableArray from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport application from './application/reducer';\nimport { updateVersion } from './global/actions';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport swap from './swap/reducer';\nimport mint from './mint/reducer';\nimport lists from './lists/reducer';\nimport burn from './burn/reducer';\nimport multicall from './multicall/reducer';\nvar PERSISTED_KEYS = ['user', 'transactions', 'lists'];\nvar store = configureStore({\n  reducer: {\n    application: application,\n    user: user,\n    transactions: transactions,\n    swap: swap,\n    mint: mint,\n    burn: burn,\n    multicall: multicall,\n    lists: lists\n  },\n  middleware: [].concat(_toConsumableArray(getDefaultMiddleware({\n    immutableCheck: false,\n    thunk: false,\n    serializableCheck: false\n  })), [save({\n    states: PERSISTED_KEYS\n  })]),\n  preloadedState: load({\n    states: PERSISTED_KEYS\n  })\n});\nstore.dispatch(updateVersion());\nexport default store;","map":{"version":3,"names":["configureStore","getDefaultMiddleware","save","load","application","updateVersion","user","transactions","swap","mint","lists","burn","multicall","PERSISTED_KEYS","store","reducer","middleware","concat","_toConsumableArray","immutableCheck","thunk","serializableCheck","states","preloadedState","dispatch"],"sources":["E:/testprojects/CoolSwap-interface/src/state/index.ts"],"sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { save, load } from 'redux-localstorage-simple';\r\n\r\nimport application from './application/reducer';\r\nimport { updateVersion } from './global/actions';\r\nimport user from './user/reducer';\r\nimport transactions from './transactions/reducer';\r\nimport swap from './swap/reducer';\r\nimport mint from './mint/reducer';\r\nimport lists from './lists/reducer';\r\nimport burn from './burn/reducer';\r\nimport multicall from './multicall/reducer';\r\n\r\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists'];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    user,\r\n    transactions,\r\n    swap,\r\n    mint,\r\n    burn,\r\n    multicall,\r\n    lists,\r\n  },\r\n  middleware: [\r\n    ...getDefaultMiddleware({ immutableCheck: false, thunk: false, serializableCheck: false }),\r\n    save({ states: PERSISTED_KEYS }),\r\n  ],\r\n  preloadedState: load({ states: PERSISTED_KEYS }),\r\n});\r\n\r\nstore.dispatch(updateVersion());\r\n\r\nexport default store;\r\nexport type AppState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n"],"mappings":";AAAA,SAASA,cAAc,EAAEC,oBAAoB,QAAQ,kBAAkB;AACvE,SAASC,IAAI,EAAEC,IAAI,QAAQ,2BAA2B;AAEtD,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,SAAS,MAAM,qBAAqB;AAE3C,IAAMC,cAAwB,GAAG,CAAC,MAAM,EAAE,cAAc,EAAE,OAAO,CAAC;AAElE,IAAMC,KAAK,GAAGd,cAAc,CAAC;EAC3Be,OAAO,EAAE;IACPX,WAAW,EAAXA,WAAW;IACXE,IAAI,EAAJA,IAAI;IACJC,YAAY,EAAZA,YAAY;IACZC,IAAI,EAAJA,IAAI;IACJC,IAAI,EAAJA,IAAI;IACJE,IAAI,EAAJA,IAAI;IACJC,SAAS,EAATA,SAAS;IACTF,KAAK,EAALA;EACF,CAAC;EACDM,UAAU,KAAAC,MAAA,CAAAC,kBAAA,CACLjB,oBAAoB,CAAC;IAAEkB,cAAc,EAAE,KAAK;IAAEC,KAAK,EAAE,KAAK;IAAEC,iBAAiB,EAAE;EAAM,CAAC,CAAC,IAC1FnB,IAAI,CAAC;IAAEoB,MAAM,EAAET;EAAe,CAAC,CAAC,EACjC;EACDU,cAAc,EAAEpB,IAAI,CAAC;IAAEmB,MAAM,EAAET;EAAe,CAAC;AACjD,CAAC,CAAC;AAEFC,KAAK,CAACU,QAAQ,CAACnB,aAAa,CAAC,CAAC,CAAC;AAE/B,eAAeS,KAAK"},"metadata":{},"sourceType":"module"}