{"ast":null,"code":"import _slicedToArray from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport useENS from '../../hooks/useENS';\nimport { parseUnits } from '@ethersproject/units';\nimport { CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from '@uniswap/sdk';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useCurrency } from '../../hooks/Tokens';\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades';\nimport useParsedQueryString from '../../hooks/useParsedQueryString';\nimport { isAddress } from '../../utils';\nimport { useCurrencyBalances } from '../wallet/hooks';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nimport { useUserSlippageTolerance } from '../user/hooks';\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices';\nimport { FACTORY_ADDRESS, ROUTER_ADDRESS } from '../../constants';\nexport function useSwapState() {\n  return useSelector(function (state) {\n    return state.swap;\n  });\n}\nexport function useSwapActionHandlers() {\n  var dispatch = useDispatch();\n  var onCurrencySelection = useCallback(function (field, currency) {\n    dispatch(selectCurrency({\n      field: field,\n      currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'ETH' : ''\n    }));\n  }, [dispatch]);\n  var onSwitchTokens = useCallback(function () {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n  var onUserInput = useCallback(function (field, typedValue) {\n    dispatch(typeInput({\n      field: field,\n      typedValue: typedValue\n    }));\n  }, [dispatch]);\n  var onChangeRecipient = useCallback(function (recipient) {\n    dispatch(setRecipient({\n      recipient: recipient\n    }));\n  }, [dispatch]);\n  return {\n    onSwitchTokens: onSwitchTokens,\n    onCurrencySelection: onCurrencySelection,\n    onUserInput: onUserInput,\n    onChangeRecipient: onChangeRecipient\n  };\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount(value, currency) {\n  if (!value || !currency) {\n    return undefined;\n  }\n  try {\n    var typedValueParsed = parseUnits(value, currency.decimals).toString();\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed)) : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(\"Failed to parse input amount: \\\"\".concat(value, \"\\\"\"), error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\nvar BAD_RECIPIENT_ADDRESSES = [FACTORY_ADDRESS, ROUTER_ADDRESS];\n\n/**\r\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\r\n * @param trade to check for the given address\r\n * @param checksummedAddress address to check in the pairs and tokens\r\n */\nfunction involvesAddress(trade, checksummedAddress) {\n  return trade.route.path.some(function (token) {\n    return token.address === checksummedAddress;\n  }) || trade.route.pairs.some(function (pair) {\n    return pair.liquidityToken.address === checksummedAddress;\n  });\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo() {\n  var _ref, _ref2, _currencyBalances, _currencies;\n  var _useActiveWeb3React = useActiveWeb3React(),\n    account = _useActiveWeb3React.account;\n  var _useSwapState = useSwapState(),\n    independentField = _useSwapState.independentField,\n    typedValue = _useSwapState.typedValue,\n    inputCurrencyId = _useSwapState[Field.INPUT].currencyId,\n    outputCurrencyId = _useSwapState[Field.OUTPUT].currencyId,\n    recipient = _useSwapState.recipient;\n  var inputCurrency = useCurrency(inputCurrencyId);\n  var outputCurrency = useCurrency(outputCurrencyId);\n  var recipientLookup = useENS(recipient !== null && recipient !== void 0 ? recipient : undefined);\n  var to = (_ref = recipient === null ? account : recipientLookup.address) !== null && _ref !== void 0 ? _ref : null;\n  var relevantTokenBalances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, [inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined]);\n  var isExactIn = independentField === Field.INPUT;\n  var parsedAmount = tryParseAmount(typedValue, (_ref2 = isExactIn ? inputCurrency : outputCurrency) !== null && _ref2 !== void 0 ? _ref2 : undefined);\n  var bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined);\n  var bestTradeExactOut = useTradeExactOut(inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, !isExactIn ? parsedAmount : undefined);\n  var v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut;\n  var currencyBalances = (_currencyBalances = {}, _defineProperty(_currencyBalances, Field.INPUT, relevantTokenBalances[0]), _defineProperty(_currencyBalances, Field.OUTPUT, relevantTokenBalances[1]), _currencyBalances);\n  var currencies = (_currencies = {}, _defineProperty(_currencies, Field.INPUT, inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined), _defineProperty(_currencies, Field.OUTPUT, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined), _currencies);\n  var inputError;\n  if (!account) {\n    inputError = 'Connect Wallet';\n  }\n  if (!parsedAmount) {\n    var _inputError;\n    inputError = (_inputError = inputError) !== null && _inputError !== void 0 ? _inputError : 'Enter an amount';\n  }\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    var _inputError2;\n    inputError = (_inputError2 = inputError) !== null && _inputError2 !== void 0 ? _inputError2 : 'Select a token';\n  }\n  var formattedTo = isAddress(to);\n  if (!to || !formattedTo) {\n    var _inputError3;\n    inputError = (_inputError3 = inputError) !== null && _inputError3 !== void 0 ? _inputError3 : 'Enter a recipient';\n  } else {\n    if (BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 || bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo) || bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo)) {\n      var _inputError4;\n      inputError = (_inputError4 = inputError) !== null && _inputError4 !== void 0 ? _inputError4 : 'Invalid recipient';\n    }\n  }\n  var _useUserSlippageToler = useUserSlippageTolerance(),\n    _useUserSlippageToler2 = _slicedToArray(_useUserSlippageToler, 1),\n    allowedSlippage = _useUserSlippageToler2[0];\n  var slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage);\n\n  // compare input balance to max input based on version\n  var _ref3 = [currencyBalances[Field.INPUT], slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null],\n    balanceIn = _ref3[0],\n    amountIn = _ref3[1];\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance';\n  }\n  return {\n    currencies: currencies,\n    currencyBalances: currencyBalances,\n    parsedAmount: parsedAmount,\n    v2Trade: v2Trade !== null && v2Trade !== void 0 ? v2Trade : undefined,\n    inputError: inputError\n  };\n}\nfunction parseCurrencyFromURLParameter(urlParam) {\n  var _ETH;\n  if (typeof urlParam === 'string') {\n    var valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH';\n    if (valid === false) return 'ETH';\n  }\n  return (_ETH = 'ETH') !== null && _ETH !== void 0 ? _ETH : '';\n}\nfunction parseTokenAmountURLParameter(urlParam) {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : '';\n}\nfunction parseIndependentFieldURLParameter(urlParam) {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT;\n}\nvar ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nvar ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nfunction validatedRecipient(recipient) {\n  if (typeof recipient !== 'string') return null;\n  var address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\nexport function queryParametersToSwapState(parsedQs) {\n  var _ref4;\n  var inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\n  var outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = '';\n    } else {\n      outputCurrency = '';\n    }\n  }\n  var recipient = validatedRecipient(parsedQs.recipient);\n  return _ref4 = {}, _defineProperty(_ref4, Field.INPUT, {\n    currencyId: inputCurrency\n  }), _defineProperty(_ref4, Field.OUTPUT, {\n    currencyId: outputCurrency\n  }), _defineProperty(_ref4, \"typedValue\", parseTokenAmountURLParameter(parsedQs.exactAmount)), _defineProperty(_ref4, \"independentField\", parseIndependentFieldURLParameter(parsedQs.exactField)), _defineProperty(_ref4, \"recipient\", recipient), _ref4;\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch() {\n  var _useActiveWeb3React2 = useActiveWeb3React(),\n    chainId = _useActiveWeb3React2.chainId;\n  var dispatch = useDispatch();\n  var parsedQs = useParsedQueryString();\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    result = _useState2[0],\n    setResult = _useState2[1];\n  useEffect(function () {\n    if (!chainId) return;\n    var parsed = queryParametersToSwapState(parsedQs);\n    dispatch(replaceSwapState({\n      typedValue: parsed.typedValue,\n      field: parsed.independentField,\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n      recipient: parsed.recipient\n    }));\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n  return result;\n}","map":{"version":3,"names":["useENS","parseUnits","CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useCallback","useEffect","useState","useDispatch","useSelector","useActiveWeb3React","useCurrency","useTradeExactIn","useTradeExactOut","useParsedQueryString","isAddress","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useUserSlippageTolerance","computeSlippageAdjustedAmounts","FACTORY_ADDRESS","ROUTER_ADDRESS","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","undefined","typedValueParsed","decimals","toString","BigInt","ether","error","console","debug","concat","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","route","path","some","token","pairs","pair","liquidityToken","useDerivedSwapInfo","_ref","_ref2","_currencyBalances","_currencies","_useActiveWeb3React","account","_useSwapState","independentField","inputCurrencyId","INPUT","outputCurrencyId","OUTPUT","inputCurrency","outputCurrency","recipientLookup","to","relevantTokenBalances","isExactIn","parsedAmount","bestTradeExactIn","bestTradeExactOut","v2Trade","currencyBalances","_defineProperty","currencies","inputError","_inputError","_inputError2","formattedTo","_inputError3","indexOf","_inputError4","_useUserSlippageToler","_useUserSlippageToler2","_slicedToArray","allowedSlippage","slippageAdjustedAmounts","_ref3","balanceIn","amountIn","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","_ETH","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","_ref4","exactAmount","exactField","useDefaultsFromURLSearch","_useActiveWeb3React2","chainId","_useState","_useState2","result","setResult","parsed"],"sources":["E:/testprojects/CoolSwap-interface/src/state/swap/hooks.ts"],"sourcesContent":["import useENS from '../../hooks/useENS';\r\nimport { parseUnits } from '@ethersproject/units';\r\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from '@uniswap/sdk';\r\nimport { ParsedQs } from 'qs';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useActiveWeb3React } from '../../hooks';\r\nimport { useCurrency } from '../../hooks/Tokens';\r\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades';\r\nimport useParsedQueryString from '../../hooks/useParsedQueryString';\r\nimport { isAddress } from '../../utils';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { useCurrencyBalances } from '../wallet/hooks';\r\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\r\nimport { SwapState } from './reducer';\r\nimport { useUserSlippageTolerance } from '../user/hooks';\r\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices';\r\nimport { FACTORY_ADDRESS, ROUTER_ADDRESS } from '../../constants';\r\n\r\nexport function useSwapState(): AppState['swap'] {\r\n  return useSelector<AppState, AppState['swap']>((state) => state.swap);\r\n}\r\n\r\nexport function useSwapActionHandlers(): {\r\n  onCurrencySelection: (field: Field, currency: Currency) => void;\r\n  onSwitchTokens: () => void;\r\n  onUserInput: (field: Field, typedValue: string) => void;\r\n  onChangeRecipient: (recipient: string | null) => void;\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const onCurrencySelection = useCallback(\r\n    (field: Field, currency: Currency) => {\r\n      dispatch(\r\n        selectCurrency({\r\n          field,\r\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'ETH' : '',\r\n        })\r\n      );\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const onSwitchTokens = useCallback(() => {\r\n    dispatch(switchCurrencies());\r\n  }, [dispatch]);\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const onChangeRecipient = useCallback(\r\n    (recipient: string | null) => {\r\n      dispatch(setRecipient({ recipient }));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return {\r\n    onSwitchTokens,\r\n    onCurrencySelection,\r\n    onUserInput,\r\n    onChangeRecipient,\r\n  };\r\n}\r\n\r\n// try to parse a user entered amount for a given token\r\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\r\n  if (!value || !currency) {\r\n    return undefined;\r\n  }\r\n  try {\r\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\r\n    if (typedValueParsed !== '0') {\r\n      return currency instanceof Token\r\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\r\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));\r\n    }\r\n  } catch (error) {\r\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\r\n    console.debug(`Failed to parse input amount: \"${value}\"`, error);\r\n  }\r\n  // necessary for all paths to return a value\r\n  return undefined;\r\n}\r\n\r\nconst BAD_RECIPIENT_ADDRESSES: string[] = [FACTORY_ADDRESS, ROUTER_ADDRESS];\r\n\r\n/**\r\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\r\n * @param trade to check for the given address\r\n * @param checksummedAddress address to check in the pairs and tokens\r\n */\r\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\r\n  return (\r\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\r\n    trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\r\n  );\r\n}\r\n\r\n// from the current swap inputs, compute the best trade and return it.\r\nexport function useDerivedSwapInfo(): {\r\n  currencies: { [field in Field]?: Currency };\r\n  currencyBalances: { [field in Field]?: CurrencyAmount };\r\n  parsedAmount: CurrencyAmount | undefined;\r\n  v2Trade: Trade | undefined;\r\n  inputError?: string;\r\n} {\r\n  const { account } = useActiveWeb3React();\r\n\r\n  const {\r\n    independentField,\r\n    typedValue,\r\n    [Field.INPUT]: { currencyId: inputCurrencyId },\r\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\r\n    recipient,\r\n  } = useSwapState();\r\n\r\n  const inputCurrency = useCurrency(inputCurrencyId);\r\n  const outputCurrency = useCurrency(outputCurrencyId);\r\n  const recipientLookup = useENS(recipient ?? undefined);\r\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null;\r\n\r\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\r\n    inputCurrency ?? undefined,\r\n    outputCurrency ?? undefined,\r\n  ]);\r\n\r\n  const isExactIn: boolean = independentField === Field.INPUT;\r\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined);\r\n\r\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined);\r\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined);\r\n\r\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut;\r\n\r\n  const currencyBalances = {\r\n    [Field.INPUT]: relevantTokenBalances[0],\r\n    [Field.OUTPUT]: relevantTokenBalances[1],\r\n  };\r\n\r\n  const currencies: { [field in Field]?: Currency } = {\r\n    [Field.INPUT]: inputCurrency ?? undefined,\r\n    [Field.OUTPUT]: outputCurrency ?? undefined,\r\n  };\r\n\r\n  let inputError: string | undefined;\r\n  if (!account) {\r\n    inputError = 'Connect Wallet';\r\n  }\r\n\r\n  if (!parsedAmount) {\r\n    inputError = inputError ?? 'Enter an amount';\r\n  }\r\n\r\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\r\n    inputError = inputError ?? 'Select a token';\r\n  }\r\n\r\n  const formattedTo = isAddress(to);\r\n  if (!to || !formattedTo) {\r\n    inputError = inputError ?? 'Enter a recipient';\r\n  } else {\r\n    if (\r\n      BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\r\n      (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\r\n      (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\r\n    ) {\r\n      inputError = inputError ?? 'Invalid recipient';\r\n    }\r\n  }\r\n\r\n  const [allowedSlippage] = useUserSlippageTolerance();\r\n\r\n  const slippageAdjustedAmounts =\r\n    v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage);\r\n\r\n  // compare input balance to max input based on version\r\n  const [balanceIn, amountIn] = [\r\n    currencyBalances[Field.INPUT],\r\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\r\n  ];\r\n\r\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\r\n    inputError = 'Insufficient ' + amountIn.currency.symbol + ' balance';\r\n  }\r\n\r\n  return {\r\n    currencies,\r\n    currencyBalances,\r\n    parsedAmount,\r\n    v2Trade: v2Trade ?? undefined,\r\n    inputError,\r\n  };\r\n}\r\n\r\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\r\n  if (typeof urlParam === 'string') {\r\n    const valid = isAddress(urlParam);\r\n    if (valid) return valid;\r\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH';\r\n    if (valid === false) return 'ETH';\r\n  }\r\n  return 'ETH' ?? '';\r\n}\r\n\r\nfunction parseTokenAmountURLParameter(urlParam: any): string {\r\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : '';\r\n}\r\n\r\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\r\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT;\r\n}\r\n\r\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\r\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\r\nfunction validatedRecipient(recipient: any): string | null {\r\n  if (typeof recipient !== 'string') return null;\r\n  const address = isAddress(recipient);\r\n  if (address) return address;\r\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\r\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\r\n  return null;\r\n}\r\n\r\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\r\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\r\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\r\n  if (inputCurrency === outputCurrency) {\r\n    if (typeof parsedQs.outputCurrency === 'string') {\r\n      inputCurrency = '';\r\n    } else {\r\n      outputCurrency = '';\r\n    }\r\n  }\r\n\r\n  const recipient = validatedRecipient(parsedQs.recipient);\r\n\r\n  return {\r\n    [Field.INPUT]: {\r\n      currencyId: inputCurrency,\r\n    },\r\n    [Field.OUTPUT]: {\r\n      currencyId: outputCurrency,\r\n    },\r\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\r\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\r\n    recipient,\r\n  };\r\n}\r\n\r\n// updates the swap state to use the defaults for a given network\r\nexport function useDefaultsFromURLSearch():\r\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\r\n  | undefined {\r\n  const { chainId } = useActiveWeb3React();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const parsedQs = useParsedQueryString();\r\n  const [result, setResult] = useState<\r\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\r\n  >();\r\n\r\n  useEffect(() => {\r\n    if (!chainId) return;\r\n    const parsed = queryParametersToSwapState(parsedQs);\r\n\r\n    dispatch(\r\n      replaceSwapState({\r\n        typedValue: parsed.typedValue,\r\n        field: parsed.independentField,\r\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\r\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\r\n        recipient: parsed.recipient,\r\n      })\r\n    );\r\n\r\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dispatch, chainId]);\r\n\r\n  return result;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}