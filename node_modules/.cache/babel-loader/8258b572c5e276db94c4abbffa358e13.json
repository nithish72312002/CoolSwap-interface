{"ast":null,"code":"import _defineProperty from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"E:\\\\testprojects\\\\CoolSwap-interface\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { JSBI, Percent, TokenAmount } from '@uniswap/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { usePair } from '../../data/Reserves';\nimport { useTotalSupply } from '../../data/TotalSupply';\nimport { useActiveWeb3React } from '../../hooks';\nimport { wrappedCurrency } from '../../utils/wrappedCurrency';\nimport { tryParseAmount } from '../swap/hooks';\nimport { useTokenBalances } from '../wallet/hooks';\nimport { Field, typeInput } from './actions';\nexport function useBurnState() {\n  return useSelector(function (state) {\n    return state.burn;\n  });\n}\nexport function useDerivedBurnInfo(currencyA, currencyB) {\n  var _pair$liquidityToken$, _pair$liquidityToken, _tokens, _liquidityValues, _parsedAmounts;\n  var _useActiveWeb3React = useActiveWeb3React(),\n    account = _useActiveWeb3React.account,\n    chainId = _useActiveWeb3React.chainId;\n  var _useBurnState = useBurnState(),\n    independentField = _useBurnState.independentField,\n    typedValue = _useBurnState.typedValue;\n\n  // pair + totalsupply\n  var _usePair = usePair(currencyA, currencyB),\n    _usePair2 = _slicedToArray(_usePair, 2),\n    pair = _usePair2[1];\n\n  // balances\n  var relevantTokenBalances = useTokenBalances(account !== null && account !== void 0 ? account : undefined, [pair === null || pair === void 0 ? void 0 : pair.liquidityToken]);\n  var userLiquidity = relevantTokenBalances === null || relevantTokenBalances === void 0 ? void 0 : relevantTokenBalances[(_pair$liquidityToken$ = pair === null || pair === void 0 ? void 0 : (_pair$liquidityToken = pair.liquidityToken) === null || _pair$liquidityToken === void 0 ? void 0 : _pair$liquidityToken.address) !== null && _pair$liquidityToken$ !== void 0 ? _pair$liquidityToken$ : ''];\n  var _ref = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)],\n    tokenA = _ref[0],\n    tokenB = _ref[1];\n  var tokens = (_tokens = {}, _defineProperty(_tokens, Field.CURRENCY_A, tokenA), _defineProperty(_tokens, Field.CURRENCY_B, tokenB), _defineProperty(_tokens, Field.LIQUIDITY, pair === null || pair === void 0 ? void 0 : pair.liquidityToken), _tokens);\n\n  // liquidity values\n  var totalSupply = useTotalSupply(pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  var liquidityValueA = pair && totalSupply && userLiquidity && tokenA &&\n  // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw) : undefined;\n  var liquidityValueB = pair && totalSupply && userLiquidity && tokenB &&\n  // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw) : undefined;\n  var liquidityValues = (_liquidityValues = {}, _defineProperty(_liquidityValues, Field.CURRENCY_A, liquidityValueA), _defineProperty(_liquidityValues, Field.CURRENCY_B, liquidityValueB), _liquidityValues);\n  var percentToRemove = new Percent('0', '100');\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100');\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair === null || pair === void 0 ? void 0 : pair.liquidityToken) {\n      var independentAmount = tryParseAmount(typedValue, pair.liquidityToken);\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw);\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      var _independentAmount = tryParseAmount(typedValue, tokens[independentField]);\n      var liquidityValue = liquidityValues[independentField];\n      if (_independentAmount && liquidityValue && !_independentAmount.greaterThan(liquidityValue)) {\n        percentToRemove = new Percent(_independentAmount.raw, liquidityValue.raw);\n      }\n    }\n  }\n  var parsedAmounts = (_parsedAmounts = {}, _defineProperty(_parsedAmounts, Field.LIQUIDITY_PERCENT, percentToRemove), _defineProperty(_parsedAmounts, Field.LIQUIDITY, userLiquidity && percentToRemove && percentToRemove.greaterThan('0') ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient) : undefined), _defineProperty(_parsedAmounts, Field.CURRENCY_A, tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient) : undefined), _defineProperty(_parsedAmounts, Field.CURRENCY_B, tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient) : undefined), _parsedAmounts);\n  var error;\n  if (!account) {\n    error = 'Connect Wallet';\n  }\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    var _error;\n    error = (_error = error) !== null && _error !== void 0 ? _error : 'Enter an amount';\n  }\n  return {\n    pair: pair,\n    parsedAmounts: parsedAmounts,\n    error: error\n  };\n}\nexport function useBurnActionHandlers() {\n  var dispatch = useDispatch();\n  var onUserInput = useCallback(function (field, typedValue) {\n    dispatch(typeInput({\n      field: field,\n      typedValue: typedValue\n    }));\n  }, [dispatch]);\n  return {\n    onUserInput: onUserInput\n  };\n}","map":{"version":3,"names":["JSBI","Percent","TokenAmount","useCallback","useDispatch","useSelector","usePair","useTotalSupply","useActiveWeb3React","wrappedCurrency","tryParseAmount","useTokenBalances","Field","typeInput","useBurnState","state","burn","useDerivedBurnInfo","currencyA","currencyB","_pair$liquidityToken$","_pair$liquidityToken","_tokens","_liquidityValues","_parsedAmounts","_useActiveWeb3React","account","chainId","_useBurnState","independentField","typedValue","_usePair","_usePair2","_slicedToArray","pair","relevantTokenBalances","undefined","liquidityToken","userLiquidity","address","_ref","tokenA","tokenB","tokens","_defineProperty","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","liquidityValueA","greaterThanOrEqual","raw","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","LIQUIDITY_PERCENT","independentAmount","greaterThan","liquidityValue","parsedAmounts","token","multiply","quotient","error","_error","useBurnActionHandlers","dispatch","onUserInput","field"],"sources":["E:/testprojects/CoolSwap-interface/src/state/burn/hooks.ts"],"sourcesContent":["import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from '@uniswap/sdk';\r\nimport { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { usePair } from '../../data/Reserves';\r\nimport { useTotalSupply } from '../../data/TotalSupply';\r\n\r\nimport { useActiveWeb3React } from '../../hooks';\r\nimport { wrappedCurrency } from '../../utils/wrappedCurrency';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { tryParseAmount } from '../swap/hooks';\r\nimport { useTokenBalances } from '../wallet/hooks';\r\nimport { Field, typeInput } from './actions';\r\n\r\nexport function useBurnState(): AppState['burn'] {\r\n  return useSelector<AppState, AppState['burn']>((state) => state.burn);\r\n}\r\n\r\nexport function useDerivedBurnInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined\r\n): {\r\n  pair?: Pair | null;\r\n  parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent;\r\n    [Field.LIQUIDITY]?: TokenAmount;\r\n    [Field.CURRENCY_A]?: CurrencyAmount;\r\n    [Field.CURRENCY_B]?: CurrencyAmount;\r\n  };\r\n  error?: string;\r\n} {\r\n  const { account, chainId } = useActiveWeb3React();\r\n\r\n  const { independentField, typedValue } = useBurnState();\r\n\r\n  // pair + totalsupply\r\n  const [, pair] = usePair(currencyA, currencyB);\r\n\r\n  // balances\r\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken]);\r\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? ''];\r\n\r\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)];\r\n  const tokens = {\r\n    [Field.CURRENCY_A]: tokenA,\r\n    [Field.CURRENCY_B]: tokenB,\r\n    [Field.LIQUIDITY]: pair?.liquidityToken,\r\n  };\r\n\r\n  // liquidity values\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken);\r\n  const liquidityValueA =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenA &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\r\n      : undefined;\r\n  const liquidityValueB =\r\n    pair &&\r\n    totalSupply &&\r\n    userLiquidity &&\r\n    tokenB &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\r\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\r\n      : undefined;\r\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\r\n    [Field.CURRENCY_A]: liquidityValueA,\r\n    [Field.CURRENCY_B]: liquidityValueB,\r\n  };\r\n\r\n  let percentToRemove: Percent = new Percent('0', '100');\r\n  // user specified a %\r\n  if (independentField === Field.LIQUIDITY_PERCENT) {\r\n    percentToRemove = new Percent(typedValue, '100');\r\n  }\r\n  // user specified a specific amount of liquidity tokens\r\n  else if (independentField === Field.LIQUIDITY) {\r\n    if (pair?.liquidityToken) {\r\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken);\r\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\r\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw);\r\n      }\r\n    }\r\n  }\r\n  // user specified a specific amount of token a or b\r\n  else {\r\n    if (tokens[independentField]) {\r\n      const independentAmount = tryParseAmount(typedValue, tokens[independentField]);\r\n      const liquidityValue = liquidityValues[independentField];\r\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\r\n        percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw);\r\n      }\r\n    }\r\n  }\r\n\r\n  const parsedAmounts: {\r\n    [Field.LIQUIDITY_PERCENT]: Percent;\r\n    [Field.LIQUIDITY]?: TokenAmount;\r\n    [Field.CURRENCY_A]?: TokenAmount;\r\n    [Field.CURRENCY_B]?: TokenAmount;\r\n  } = {\r\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\r\n    [Field.LIQUIDITY]:\r\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\r\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_A]:\r\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\r\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\r\n        : undefined,\r\n    [Field.CURRENCY_B]:\r\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\r\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\r\n        : undefined,\r\n  };\r\n\r\n  let error: string | undefined;\r\n  if (!account) {\r\n    error = 'Connect Wallet';\r\n  }\r\n\r\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? 'Enter an amount';\r\n  }\r\n\r\n  return { pair, parsedAmounts, error };\r\n}\r\n\r\nexport function useBurnActionHandlers(): {\r\n  onUserInput: (field: Field, typedValue: string) => void;\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return {\r\n    onUserInput,\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}