{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { addTransaction, checkedTransaction, clearAllTransactions, finalizeTransaction } from './actions';\nvar now = function now() {\n  return new Date().getTime();\n};\nexport var initialState = {};\nexport default createReducer(initialState, function (builder) {\n  return builder.addCase(addTransaction, function (transactions, _ref) {\n    var _transactions$chainId, _transactions$chainId2;\n    var _ref$payload = _ref.payload,\n      chainId = _ref$payload.chainId,\n      from = _ref$payload.from,\n      hash = _ref$payload.hash,\n      approval = _ref$payload.approval,\n      summary = _ref$payload.summary,\n      claim = _ref$payload.claim;\n    if ((_transactions$chainId = transactions[chainId]) === null || _transactions$chainId === void 0 ? void 0 : _transactions$chainId[hash]) {\n      throw Error('Attempted to add existing transaction.');\n    }\n    var txs = (_transactions$chainId2 = transactions[chainId]) !== null && _transactions$chainId2 !== void 0 ? _transactions$chainId2 : {};\n    txs[hash] = {\n      hash: hash,\n      approval: approval,\n      summary: summary,\n      claim: claim,\n      from: from,\n      addedTime: now()\n    };\n    transactions[chainId] = txs;\n  }).addCase(clearAllTransactions, function (transactions, _ref2) {\n    var chainId = _ref2.payload.chainId;\n    if (!transactions[chainId]) return;\n    transactions[chainId] = {};\n  }).addCase(checkedTransaction, function (transactions, _ref3) {\n    var _transactions$chainId3;\n    var _ref3$payload = _ref3.payload,\n      chainId = _ref3$payload.chainId,\n      hash = _ref3$payload.hash,\n      blockNumber = _ref3$payload.blockNumber;\n    var tx = (_transactions$chainId3 = transactions[chainId]) === null || _transactions$chainId3 === void 0 ? void 0 : _transactions$chainId3[hash];\n    if (!tx) {\n      return;\n    }\n    if (!tx.lastCheckedBlockNumber) {\n      tx.lastCheckedBlockNumber = blockNumber;\n    } else {\n      tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n    }\n  }).addCase(finalizeTransaction, function (transactions, _ref4) {\n    var _transactions$chainId4;\n    var _ref4$payload = _ref4.payload,\n      hash = _ref4$payload.hash,\n      chainId = _ref4$payload.chainId,\n      receipt = _ref4$payload.receipt;\n    var tx = (_transactions$chainId4 = transactions[chainId]) === null || _transactions$chainId4 === void 0 ? void 0 : _transactions$chainId4[hash];\n    if (!tx) {\n      return;\n    }\n    tx.receipt = receipt;\n    tx.confirmedTime = now();\n  });\n});","map":{"version":3,"names":["createReducer","addTransaction","checkedTransaction","clearAllTransactions","finalizeTransaction","now","Date","getTime","initialState","builder","addCase","transactions","_ref","_transactions$chainId","_transactions$chainId2","_ref$payload","payload","chainId","from","hash","approval","summary","claim","Error","txs","addedTime","_ref2","_ref3","_transactions$chainId3","_ref3$payload","blockNumber","tx","lastCheckedBlockNumber","Math","max","_ref4","_transactions$chainId4","_ref4$payload","receipt","confirmedTime"],"sources":["E:/testprojects/CoolSwap-interface/src/state/transactions/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions';\r\n\r\nconst now = () => new Date().getTime();\r\n\r\nexport interface TransactionDetails {\r\n  hash: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n  claim?: { recipient: string };\r\n  receipt?: SerializableTransactionReceipt;\r\n  lastCheckedBlockNumber?: number;\r\n  addedTime: number;\r\n  confirmedTime?: number;\r\n  from: string;\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails;\r\n  };\r\n}\r\n\r\nexport const initialState: TransactionState = {};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary, claim } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.');\r\n      }\r\n      const txs = transactions[chainId] ?? {};\r\n      txs[hash] = { hash, approval, summary, claim, from, addedTime: now() };\r\n      transactions[chainId] = txs;\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return;\r\n      transactions[chainId] = {};\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber;\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      tx.receipt = receipt;\r\n      tx.confirmedTime = now();\r\n    })\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}