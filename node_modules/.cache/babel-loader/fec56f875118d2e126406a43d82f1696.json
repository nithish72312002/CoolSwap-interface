{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addTransaction } from './actions';\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder() {\n  var _useActiveWeb3React = useActiveWeb3React(),\n    chainId = _useActiveWeb3React.chainId,\n    account = _useActiveWeb3React.account;\n  var dispatch = useDispatch();\n  return useCallback(function (response) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      summary = _ref.summary,\n      approval = _ref.approval,\n      claim = _ref.claim;\n    if (!account) return;\n    if (!chainId) return;\n    var hash = response.hash;\n    if (!hash) {\n      throw Error('No transaction hash found.');\n    }\n    dispatch(addTransaction({\n      hash: hash,\n      from: account,\n      chainId: chainId,\n      approval: approval,\n      summary: summary,\n      claim: claim\n    }));\n  }, [dispatch, chainId, account]);\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions() {\n  var _state$chainId;\n  var _useActiveWeb3React2 = useActiveWeb3React(),\n    chainId = _useActiveWeb3React2.chainId;\n  var state = useSelector(function (state) {\n    return state.transactions;\n  });\n  return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n}\nexport function useIsTransactionPending(transactionHash) {\n  var transactions = useAllTransactions();\n  if (!transactionHash || !transactions[transactionHash]) return false;\n  return !transactions[transactionHash].receipt;\n}\n\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\nexport function isTransactionRecent(tx) {\n  return new Date().getTime() - tx.addedTime < 86400000;\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress, spender) {\n  var allTransactions = useAllTransactions();\n  return useMemo(function () {\n    return typeof tokenAddress === 'string' && typeof spender === 'string' && Object.keys(allTransactions).some(function (hash) {\n      var tx = allTransactions[hash];\n      if (!tx) return false;\n      if (tx.receipt) {\n        return false;\n      } else {\n        var approval = tx.approval;\n        if (!approval) return false;\n        return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\n      }\n    });\n  }, [allTransactions, spender, tokenAddress]);\n}\n\n// watch for submissions to claim\n// return null if not done loading, return undefined if not found\nexport function useUserHasSubmittedClaim(account) {\n  var allTransactions = useAllTransactions();\n\n  // get the txn if it has been submitted\n  var claimTxn = useMemo(function () {\n    var txnIndex = Object.keys(allTransactions).find(function (hash) {\n      var tx = allTransactions[hash];\n      return tx.claim && tx.claim.recipient === account;\n    });\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined;\n  }, [account, allTransactions]);\n  return {\n    claimSubmitted: Boolean(claimTxn),\n    claimTxn: claimTxn\n  };\n}","map":{"version":3,"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addTransaction","useTransactionAdder","_useActiveWeb3React","chainId","account","dispatch","response","_ref","arguments","length","undefined","summary","approval","claim","hash","Error","from","useAllTransactions","_state$chainId","_useActiveWeb3React2","state","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some","useUserHasSubmittedClaim","claimTxn","txnIndex","find","recipient","claimSubmitted","Boolean"],"sources":["E:/testprojects/CoolSwap-interface/src/state/transactions/hooks.tsx"],"sourcesContent":["import { TransactionResponse } from '@ethersproject/providers';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { useActiveWeb3React } from '../../hooks';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { addTransaction } from './actions';\r\nimport { TransactionDetails } from './reducer';\r\n\r\n// helper that can take a ethers library transaction response and add it to the list of transactions\r\nexport function useTransactionAdder(): (\r\n  response: TransactionResponse,\r\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string }; claim?: { recipient: string } }\r\n) => void {\r\n  const { chainId, account } = useActiveWeb3React();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  return useCallback(\r\n    (\r\n      response: TransactionResponse,\r\n      {\r\n        summary,\r\n        approval,\r\n        claim,\r\n      }: { summary?: string; claim?: { recipient: string }; approval?: { tokenAddress: string; spender: string } } = {}\r\n    ) => {\r\n      if (!account) return;\r\n      if (!chainId) return;\r\n\r\n      const { hash } = response;\r\n      if (!hash) {\r\n        throw Error('No transaction hash found.');\r\n      }\r\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary, claim }));\r\n    },\r\n    [dispatch, chainId, account]\r\n  );\r\n}\r\n\r\n// returns all the transactions for the current chain\r\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\r\n  const { chainId } = useActiveWeb3React();\r\n\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  return chainId ? state[chainId] ?? {} : {};\r\n}\r\n\r\nexport function useIsTransactionPending(transactionHash?: string): boolean {\r\n  const transactions = useAllTransactions();\r\n\r\n  if (!transactionHash || !transactions[transactionHash]) return false;\r\n\r\n  return !transactions[transactionHash].receipt;\r\n}\r\n\r\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\r\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\r\n  return new Date().getTime() - tx.addedTime < 86_400_000;\r\n}\r\n\r\n// returns whether a token has a pending approval transaction\r\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\r\n  const allTransactions = useAllTransactions();\r\n  return useMemo(\r\n    () =>\r\n      typeof tokenAddress === 'string' &&\r\n      typeof spender === 'string' &&\r\n      Object.keys(allTransactions).some((hash) => {\r\n        const tx = allTransactions[hash];\r\n        if (!tx) return false;\r\n        if (tx.receipt) {\r\n          return false;\r\n        } else {\r\n          const approval = tx.approval;\r\n          if (!approval) return false;\r\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx);\r\n        }\r\n      }),\r\n    [allTransactions, spender, tokenAddress]\r\n  );\r\n}\r\n\r\n// watch for submissions to claim\r\n// return null if not done loading, return undefined if not found\r\nexport function useUserHasSubmittedClaim(account?: string): {\r\n  claimSubmitted: boolean;\r\n  claimTxn: TransactionDetails | undefined;\r\n} {\r\n  const allTransactions = useAllTransactions();\r\n\r\n  // get the txn if it has been submitted\r\n  const claimTxn = useMemo(() => {\r\n    const txnIndex = Object.keys(allTransactions).find((hash) => {\r\n      const tx = allTransactions[hash];\r\n      return tx.claim && tx.claim.recipient === account;\r\n    });\r\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined;\r\n  }, [account, allTransactions]);\r\n\r\n  return { claimSubmitted: Boolean(claimTxn), claimTxn };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}